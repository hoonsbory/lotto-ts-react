[{"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx":"1","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx":"2","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts":"3","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts":"4","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\SelectNum.tsx":"5","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\Draw.tsx":"6","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx":"7","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx":"8","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx":"9","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.tsx":"10","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts":"11","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx":"12","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\ChartSelect.tsx":"13","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx":"14","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx":"15","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\SearchLotto.tsx":"16","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx":"17","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx":"18","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx":"19","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx":"20","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts":"21","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx":"22","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts":"23","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts":"24","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\PieChart.tsx":"25","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx":"26","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\HallOfFame.tsx":"27","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx":"28","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\UserResult.tsx":"29","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx":"30","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx":"31","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js":"32","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts":"33","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts":"34"},{"size":1081,"mtime":1609628325803,"results":"35","hashOfConfig":"36"},{"size":1087,"mtime":1609429025283,"results":"37","hashOfConfig":"36"},{"size":5573,"mtime":1609637374561,"results":"38","hashOfConfig":"36"},{"size":894,"mtime":1608892886260,"results":"39","hashOfConfig":"36"},{"size":8041,"mtime":1609643616507,"results":"40","hashOfConfig":"36"},{"size":4953,"mtime":1609643796635,"results":"41","hashOfConfig":"36"},{"size":1469,"mtime":1609643679520,"results":"42","hashOfConfig":"36"},{"size":1129,"mtime":1609391199769,"results":"43","hashOfConfig":"36"},{"size":1229,"mtime":1609620151514,"results":"44","hashOfConfig":"36"},{"size":2854,"mtime":1609613586397,"results":"45","hashOfConfig":"36"},{"size":745,"mtime":1609644006871,"results":"46","hashOfConfig":"36"},{"size":5091,"mtime":1609651826861,"results":"47","hashOfConfig":"36"},{"size":3237,"mtime":1609642530515,"results":"48","hashOfConfig":"36"},{"size":518,"mtime":1609379324868,"results":"49","hashOfConfig":"36"},{"size":5002,"mtime":1609651826861,"results":"50","hashOfConfig":"36"},{"size":2866,"mtime":1609651485268,"results":"51","hashOfConfig":"36"},{"size":406,"mtime":1609624709209,"results":"52","hashOfConfig":"36"},{"size":772,"mtime":1609388035424,"results":"53","hashOfConfig":"36"},{"size":1409,"mtime":1609621158330,"results":"54","hashOfConfig":"36"},{"size":2481,"mtime":1609643051127,"results":"55","hashOfConfig":"36"},{"size":680,"mtime":1609643679519,"results":"56","hashOfConfig":"36"},{"size":606,"mtime":1609514815835,"results":"57","hashOfConfig":"36"},{"size":1018,"mtime":1609606739386,"results":"58","hashOfConfig":"36"},{"size":1199,"mtime":1609597407856,"results":"59","hashOfConfig":"36"},{"size":2886,"mtime":1609602286909,"results":"60","hashOfConfig":"36"},{"size":2481,"mtime":1609651826861,"results":"61","hashOfConfig":"36"},{"size":2822,"mtime":1609651485269,"results":"62","hashOfConfig":"36"},{"size":541,"mtime":1609620032909,"results":"63","hashOfConfig":"36"},{"size":4205,"mtime":1609642031658,"results":"64","hashOfConfig":"36"},{"size":1271,"mtime":1609632731431,"results":"65","hashOfConfig":"36"},{"size":906,"mtime":1609637577422,"results":"66","hashOfConfig":"36"},{"size":941,"mtime":1609648120222,"results":"67","hashOfConfig":"36"},{"size":425,"mtime":1608424066436,"results":"68","hashOfConfig":"36"},{"size":205,"mtime":1608643267574,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"1w0125e",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"73"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"73"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"73"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"73"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"73"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"73"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx",["152"],"import SelectNum from './pages/SelectNum';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components'\nimport ChartSelect from './pages/ChartSelect';\nimport SearchLotto from './pages/SearchLotto';\nimport { disableReactDevTools } from '@fvilers/disable-react-devtools';\nimport HallOfFame from './pages/HallOfFame';\nimport './App.css'\nimport UserResult from './pages/UserResult';\n\nif (process.env.NODE_ENV === 'production') {\n  disableReactDevTools();\n}\n\nconst HeadLine = styled.h2`\nposition: relative;\n`\n\n\n\nlet pcCheck:string = window.navigator.userAgent.indexOf(\"Mobile\") > -1 ? \"true\" : \"false\"\nsessionStorage.setItem(\"mobile\",pcCheck)\n\nfunction App() {\n  \n  \n  return (\n        <div className=\"App\">\n          <HeadLine>로또 추첨기 with TypeScript</HeadLine>\n          <SearchLotto></SearchLotto>\n          <SelectNum></SelectNum>\n          {/* <Route path='/result' component={TsTest}></Route> */}\n          <ChartSelect></ChartSelect>\n          <HallOfFame></HallOfFame>\n          <UserResult></UserResult>\n        </div>\n  );\n}\n\nexport default App;\n",["153","154"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts",["155","156"],"// types\r\n\r\nimport { RankResult } from \"../models/RankResult\";\r\n\r\n//interface를 통해 타입을 정해준다.\r\nexport interface State {\r\n  list: number[][];\r\n  accumulateList: number[][];\r\n  resizeOpt: boolean;\r\n  graphSize: number;\r\n  drawCheck: boolean;\r\n  corrected: boolean[];\r\n  bonusCorrect: boolean[];\r\n  recentRound: number;\r\n  resultTrigger: boolean;\r\n  roundSelect1: number\r\n  roundSelect2: number\r\n  userResult: any\r\n}\r\n\r\n//액션 타입\r\nexport const LIST = \"LIST\";\r\nexport const ALIST = \"ALIST\";\r\nexport const RESIZE = \"RESIZE\";\r\nexport const GRAPHSIZE = \"GRAPHSIZE\";\r\nexport const DRAWCHECK = \"DRAWCHECK\";\r\nexport const CORRECTED = \"CORRECTED\";\r\nexport const BONUSCORRECT = \"BONUSCORRECT\";\r\nexport const RECENTROUND = \"RECENTROUND\";\r\nexport const TRIGGER = \"TRIGGER\";\r\nexport const ROUNDSELECT1 = \"ROUNDSELECT1\"\r\nexport const ROUNDSELECT2 = \"ROUNDSELECT2\"\r\nexport const USERRESULT = \"USERRESULT\"\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\ninterface ListAction {\r\n  newList: number[][];\r\n  type: typeof LIST;\r\n}\r\n\r\ninterface AccumulateListAction {\r\n  newList: number[][];\r\n  type: typeof ALIST;\r\n}\r\n\r\ninterface ResizeOpt {\r\n  value: boolean;\r\n  type: typeof RESIZE;\r\n}\r\ninterface GraphSize {\r\n  size: number;\r\n  type: typeof GRAPHSIZE;\r\n}\r\ninterface DrawCheck {\r\n  value: boolean;\r\n  type: typeof DRAWCHECK;\r\n}\r\ninterface Corrected {\r\n  value: boolean[];\r\n  type: typeof CORRECTED;\r\n}\r\ninterface bonusCorrect {\r\n  value: boolean[];\r\n  type: typeof BONUSCORRECT;\r\n}\r\ninterface RecentRound {\r\n  value: number;\r\n  type: typeof RECENTROUND;\r\n}\r\n\r\ninterface ResultTrigger {\r\n  value: boolean;\r\n  type: typeof TRIGGER;\r\n}\r\ninterface RoundSelect1 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT1;\r\n}\r\ninterface RoundSelect2 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT2;\r\n}\r\ninterface UserResult {\r\n  value: any;\r\n  type: typeof USERRESULT;\r\n}\r\n\r\ntype ActionTypes = ListAction |\r\n  AccumulateListAction |\r\n  ResizeOpt | GraphSize |\r\n  DrawCheck | Corrected |\r\n  RecentRound |\r\n  ResultTrigger |\r\n  bonusCorrect |\r\n  RoundSelect1 |\r\n  RoundSelect2 | \r\n  UserResult\r\n// interface ActionTypes {\r\n//   actionTypes : ListAction | List2Action\r\n// }\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction list(newList: number[][]) {\r\n  return {\r\n    type: LIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction accumulateList(newList: number[]) {\r\n  return {\r\n    type: ALIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction resizeOpt(value: boolean) {\r\n  return {\r\n    type: RESIZE,\r\n    value: value\r\n  };\r\n}\r\nfunction graphSizeUp(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction graphSizeDown(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction drawCheck(value: boolean) {\r\n  return {\r\n    type: DRAWCHECK,\r\n    value: value\r\n  };\r\n}\r\nfunction corrected(value: boolean[]) {\r\n  return {\r\n    type: CORRECTED,\r\n    value: value\r\n  };\r\n}\r\nfunction bonusCorrect(value: boolean[]) {\r\n  return {\r\n    type: BONUSCORRECT,\r\n    value: value\r\n  };\r\n}\r\nfunction recentRound(value: number) {\r\n  return {\r\n    type: RECENTROUND,\r\n    value: value\r\n  };\r\n}\r\nfunction resultTrigger(value: boolean) {\r\n  return {\r\n    type: TRIGGER,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect1(value: number) {\r\n  return {\r\n    type: ROUNDSELECT1,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect2(value: number) {\r\n  return {\r\n    type: ROUNDSELECT2,\r\n    value: value\r\n  };\r\n}\r\nfunction userResult(value: any) {\r\n  return {\r\n    type: USERRESULT,\r\n    value: value\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  list, accumulateList, resizeOpt, graphSizeUp, graphSizeDown, drawCheck, corrected, recentRound, resultTrigger, bonusCorrect, roundSelect1, roundSelect2, userResult\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: State = {\r\n  list: [[]],\r\n  accumulateList: [],\r\n  resizeOpt: false,\r\n  graphSize: 1160,\r\n  drawCheck: false,\r\n  corrected: [],\r\n  bonusCorrect: [],\r\n  recentRound: 0,\r\n  resultTrigger: false,\r\n  roundSelect1: 1,\r\n  roundSelect2: 1,\r\n  userResult: {}\r\n};\r\n\r\n// reducers\r\nexport function Reducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): State {\r\n  switch (action.type) {\r\n    case LIST:\r\n      return {\r\n        ...state,\r\n        list: action.newList\r\n      };\r\n    case ALIST:\r\n      return {\r\n        ...state,\r\n        accumulateList: action.newList\r\n      };\r\n    case RESIZE:\r\n      return {\r\n        ...state,\r\n        resizeOpt: action.value\r\n      };\r\n    case GRAPHSIZE:\r\n      return {\r\n        ...state,\r\n        graphSize: action.size\r\n      };\r\n    case DRAWCHECK:\r\n      return {\r\n        ...state,\r\n        drawCheck: action.value\r\n      };\r\n    case CORRECTED:\r\n      return {\r\n        ...state,\r\n        corrected: action.value\r\n      };\r\n    case BONUSCORRECT:\r\n      return {\r\n        ...state,\r\n        bonusCorrect: action.value\r\n      };\r\n    case RECENTROUND:\r\n      return {\r\n        ...state,\r\n        recentRound: action.value\r\n      };\r\n    case TRIGGER:\r\n      return {\r\n        ...state,\r\n        resultTrigger: action.value\r\n      };\r\n    case ROUNDSELECT1:\r\n      return {\r\n        ...state,\r\n        roundSelect1: action.value\r\n      };\r\n    case ROUNDSELECT2:\r\n      return {\r\n        ...state,\r\n        roundSelect2: action.value\r\n      };\r\n      case USERRESULT:\r\n      return {\r\n        ...state,\r\n        userResult: action.value\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\SelectNum.tsx",["157"],"import { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/store';\r\nimport React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '../components/Button';\r\n\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\n\r\nimport Draw from './Draw';\r\nimport NumList from '../components/NumList';\r\nimport NumLineWrap from '../components/NumLineWrap';\r\nimport Rank from '../components/Rank';\r\nimport DeleteSvg from '../components/DeleteSvg';\r\nimport SubTitle from '../components/SubTitle';\r\nimport { RankResultNum } from '../models/RankResultNum';\r\nimport { RankResult } from '../models/RankResult';\r\n\r\n//ts에서 props를 사용하는 방법\r\n\r\n\r\n//이런 식으로 자주 쓰일 것 같은 css를 만들어놓고 편리하게 사용 가능.\r\n// const hoverForPC = css`\r\n//     &:hover{\r\n//         background : rgb(70, 77, 82);\r\n//         color : white;\r\n//     }\r\n// `\r\nconst Section = styled.section`\r\n    ${props => props.theme.sectionCss}\r\n`\r\n\r\nconst SmallDiv = styled.div`\r\n    color : gray;\r\n    font-size : 12px;\r\n    display : flex;\r\n    flex-direction : column-reverse;\r\n`\r\n\r\nconst NumDiv = styled.div`\r\n    `\r\nconst SelectNum = () => {\r\n    var list = useSelector((state: StoreState) => state.Reducer.list);\r\n    var draw = useSelector((state: StoreState) => state.Reducer.drawCheck);\r\n    var correct = useSelector((state: StoreState) => state.Reducer.corrected);\r\n    var bonusCorrect = useSelector((state: StoreState) => state.Reducer.bonusCorrect);\r\n    var trigger = useSelector((state: StoreState) => state.Reducer.resultTrigger);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setList = (list: number[][]) => {\r\n        dispatch(actionCreators.list(list))\r\n    }\r\n    const setDraw = (value: boolean) => {\r\n        dispatch(actionCreators.drawCheck(value))\r\n    }\r\n    const setCorrect = (value: boolean[]) => {\r\n        dispatch(actionCreators.corrected(value))\r\n    }\r\n    const setbonusCorrect = (value: boolean[]) => {\r\n        dispatch(actionCreators.bonusCorrect(value))\r\n    }\r\n    const setTrigger = (value: boolean) => {\r\n        dispatch(actionCreators.resultTrigger(value))\r\n    }\r\n    const setUserResult = (value: any) => {\r\n        dispatch(actionCreators.userResult(value))\r\n    }\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([])\r\n    const [line, setLine] = useState<number>(0)\r\n\r\n\r\n    useEffect(() => {\r\n        var result = localStorage.getItem(\"userResult\")\r\n        if(result) setUserResult(JSON.parse(result))\r\n    }, [])\r\n\r\n    let allNum: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]\r\n\r\n    //번호 선택 이벤트\r\n    const select = (num: number) => {\r\n        if(afterDraw()) return\r\n        if (list[line].includes(num)) {\r\n            //번호 선택 해제. 배열에서 제거하고 스타일 변경을 위해 false로 변경.\r\n            list[line].splice(list[line].indexOf(num), 1)\r\n            selectBtn[num - 1] = false\r\n            setSelectBtn([...selectBtn])\r\n            setList([...list])\r\n        }\r\n        else if (list[line].length === 6) return\r\n        else {\r\n            selectBtn[num - 1] = true\r\n            setSelectBtn([...selectBtn])\r\n            list[line].push(num)\r\n            setList([...list])\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    let map = allNum.map((x, idx) => <NumList content={x} selected={selectBtn[idx]} id={`btn${x}`} click={select}></NumList>)\r\n\r\n    const reset = () => {\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setTrigger(false)\r\n        setDraw(false)\r\n        setLine(0)\r\n        setSelectBtn([])\r\n        setList([[]])\r\n    }\r\n    console.log(\"aaa\")\r\n\r\n    const submit = () => {\r\n        if (list[line].length < 6) {\r\n            alert(\"총 6개의 번호를 선택해주세요\")\r\n            return\r\n        }\r\n        if (window.confirm(`선택한 로또번호로 추첨하시겠습니까?`)) {\r\n            setDraw(true)\r\n        }\r\n    }\r\n\r\n    const afterDraw = () => {\r\n        if(document.getElementById(\"resetBtn\")?.nextElementSibling?.nextElementSibling?.firstChild?.nodeName==='SPAN'){\r\n            if(window.confirm(\"추첨이 시작된 로또이므로 번호를 추가할 수 없습니다. 초기화하시겠습니까?\")){\r\n                reset()\r\n                return true\r\n            } \r\n            else return true\r\n        }\r\n        else return false\r\n    }\r\n\r\n    const random = () => {\r\n        if(afterDraw()) return\r\n        var length: number = list[line].length\r\n        for (var i = 0; i < 6 - length; i++) {\r\n            while (true) {\r\n                var num: number = Math.floor((Math.random() * 45) + 1)\r\n                if (!list[line].includes(num)) {\r\n                    document.getElementById(`btn${num}`)?.click()\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const addLine = () => {\r\n        if (list[line].length < 6) return\r\n        if(afterDraw()) return\r\n        list.push([])\r\n        setList([...list])\r\n        setLine(line + 1)\r\n        setSelectBtn([])\r\n    }\r\n\r\n    const resetOneLine = () => {\r\n        list[line] = []\r\n        setSelectBtn([])\r\n        setList([...list])\r\n    }\r\n\r\n    const deleteLine = (idx: number) => {\r\n        list.splice(idx, 1)\r\n        setList([...list])\r\n        setLine(line - 1)\r\n    }\r\n\r\n    const deleteSelectLine = (idx:number) => {\r\n        if(list.length===idx+1) setSelectBtn([])\r\n        deleteLine(idx)\r\n    }\r\n\r\n  \r\n\r\n    var rankResult = new RankResult()\r\n    var rankResultNum = new RankResultNum()\r\n    return (\r\n        <Section>\r\n            <SubTitle content=\"가상 로또 추첨\"></SubTitle>\r\n            <NumDiv>\r\n                {map}\r\n            </NumDiv>\r\n            <Button fontSize={\"1.1em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"나머지 랜덤\" click={random}></Button>\r\n            <Button fontSize={\"1.1em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"한 줄 추가\" click={addLine}></Button>\r\n            <Button fontSize={\"1.1em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"현재 줄 초기화\" click={resetOneLine}></Button>\r\n            <Button fontSize={\"1.1em\"} color=\"rgb(235, 83, 116)\" bg=\"rgba(235, 83, 116, 0.12)\" hoverBg=\"rgb(235, 83, 116)\" content=\"전체초기화\" click={reset}></Button>\r\n            <Button fontSize={\"1.1em\"} color=\"rgb(255,94,0)\" bg=\"rgba(255,94,0,.12)\" hoverBg=\"rgb(255,94,0)\" content=\"추첨하기\" click={submit}></Button>\r\n            {draw ? <Draw  bonusCorrect={bonusCorrect} setbonusCorrect={setbonusCorrect} trigger={trigger} setTrigger={setTrigger} list={list} setDraw={setDraw} setCorrect={setCorrect} correct={correct}></Draw> : ''}\r\n            <LineDiv fontSize={15} content=\"내가 뽑은 로또 번호\"></LineDiv>\r\n            <div>\r\n                {list.map((i, idx) => <NumLineWrap content={list[idx].length === 0 ? (list.length > 1 ? <SmallDiv>새 번호를 선택해주세요<Button   hoverBg=\"#EAEAEA\"  bg=\"none\" content={<DeleteSvg></DeleteSvg>} click={() => deleteSelectLine(idx)}></Button></SmallDiv> :<SmallDiv>새 번호를 선택해주세요</SmallDiv>) \r\n\r\n                : <div><Rank setUserResult={setUserResult} rankResultNum={rankResultNum}  rankResult={rankResult} listSize={list.length} idx={idx}  list={list[idx]} correct={correct} bonusCorrect={bonusCorrect} trigger={trigger}></Rank> \r\n\r\n                {list[idx].sort((a,b)=> a-b).map(x => <ResultNum bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x}></ResultNum>)}\r\n\r\n                {idx > 0 ? <Button  float=\"right\" hoverBg=\"#EAEAEA\"  bg=\"none\" content={<DeleteSvg></DeleteSvg>} click={() => deleteSelectLine(idx)}></Button> : ''}</div>}></NumLineWrap>)}\r\n            </div>\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default SelectNum\r\n\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\Draw.tsx",["158","159","160"],"import React, { useState, useCallback } from 'react'\r\nimport { Debounce } from '../Debounce'\r\nimport Button from '../components/Button'\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\nimport styled from 'styled-components'\r\nimport NumLineWrap from '../components/NumLineWrap';\r\n\r\nconst Div = styled.div`\r\n    border-top : 1px solid rgba(134,134,134,0.19);\r\n    background: rgba(134,134,134,0.07);\r\n    animation: ${props => props.theme.fadeUp} .5s linear alternate;\r\n    margin-bottom : 15px;\r\n    margin-top : 15px;\r\n`\r\nconst SmallDiv = styled.div`\r\n    color : gray;\r\n    font-size : 12px;\r\n`\r\ntype props = {\r\n    list: number[][]\r\n    setDraw: Function\r\n    setCorrect: Function\r\n    correct: boolean[]\r\n    setbonusCorrect: Function\r\n    bonusCorrect: boolean[]\r\n    setTrigger: Function\r\n    trigger: boolean\r\n}\r\n\r\nconst Draw = ({ trigger, setTrigger, list, setDraw, setCorrect, correct, setbonusCorrect, bonusCorrect }: props) => {\r\n\r\n    //useSelector로 state에 접근\r\n    // var list = useSelector((state: StoreState) => state.Reducer.list);\r\n    const [result, setResult] = useState<number[]>([]);\r\n    //정답 유무를 구별할 boolean 배열. 동적으로 style component를 변경하려면 props를 state로 관리해야한다. \r\n    // const [correct,setCorrect] = useState<boolean[]>([])\r\n\r\n    let id: NodeJS.Timeout;\r\n\r\n\r\n\r\n    const random = useCallback((arr: Array<number>) => {\r\n        document.getElementById('startBtn')?.setAttribute(\"disabled\", \"true\");\r\n        var num = document.getElementById(\"num\")\r\n        id = setInterval(() => {\r\n            if (!num) clearInterval(id)\r\n            while (num) {\r\n                let number = Math.floor((Math.random() * 45) + 1)\r\n                if (!arr.includes(number)) {\r\n                    num.innerText = number.toString()\r\n                    break;\r\n                }\r\n            }\r\n        }, 50);\r\n    }, [])\r\n\r\n    //state가 변경되어 렌더링이 되면 이전에 시작된 interval값을 찾지 못하기 때문에 usecallback으로 함수 재생성을 막아줘야함.\r\n    const stop = Debounce(useCallback((correct: Array<boolean>, bonusCorrect: Array<boolean>, result: Array<number>, list: Array<number[]>, trigger: boolean) => {\r\n\r\n        let num = parseInt(document.getElementById('num')!.innerText)\r\n        if (num === 0) return\r\n        clearInterval(id)\r\n        list.forEach(i => {\r\n            if (i.includes(num)) {\r\n                if (result.length !== 6) {\r\n                    correct[num] = true;\r\n                    setCorrect([...correct])\r\n                }\r\n                else {\r\n                    bonusCorrect[num] = true;\r\n                    setbonusCorrect([...bonusCorrect])\r\n                }\r\n            }\r\n        })\r\n        setResult([...result, num])\r\n\r\n\r\n\r\n        if (result.length < 6)\r\n            setTimeout(() => {\r\n                random([...result, num])\r\n            }, 600);\r\n\r\n        else {\r\n            document.getElementById('stopBtn')!.setAttribute(\"disabled\", \"true\");\r\n            setTrigger(true)\r\n            // setTimeout(() => {\r\n            //     alert(`${correct.filter(x => x).length}개 맞추셨습니다!`)\r\n            // }, 500);\r\n        }\r\n    }, []), 700)\r\n\r\n    const reset = useCallback(() => {\r\n        clearInterval(id)\r\n        document.getElementById('num')!.innerText = \"0\"\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setResult([])\r\n        setTimeout(() => {\r\n            setTrigger(false)\r\n        }, 200);\r\n\r\n        document.getElementById('stopBtn')!.removeAttribute(\"disabled\")\r\n        document.getElementById('startBtn')!.removeAttribute(\"disabled\")\r\n    }, [])\r\n\r\n    return (\r\n        <Div id=\"drawSec\">\r\n            <h1 id=\"num\" style={{fontSize : \"30px\"}}>0</h1>\r\n            <Button fontSize=\"1.1em\" id=\"startBtn\" content=\"추첨시작\" click={() => random([])}></Button>\r\n            <Button fontSize=\"1.1em\" id=\"stopBtn\" click={() => stop(correct, bonusCorrect, result, list, trigger)} content=\"뽑기\"></Button>\r\n            <Button fontSize=\"1.1em\" id=\"resetBtn\" color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" click={reset} content=\"초기화\"></Button>\r\n            <LineDiv fontSize={15} content=\"추첨 결과\"></LineDiv>\r\n            <NumLineWrap content={result.length === 0 ? <SmallDiv>추첨시작을 누른 후 당첨숫자를 뽑아보세요</SmallDiv> : result.map((x, idx) => {\r\n                if (idx === 6)\r\n                    return (\r\n                        <span id=\"bonusSpan\">+  <ResultNum bonusCorrect={bonusCorrect[x]} correct={correct[x]} bonus={true} num={x}></ResultNum></span>\r\n                    )\r\n                else\r\n                    return (\r\n                        <ResultNum bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x}></ResultNum>\r\n                    )\r\n            })}></NumLineWrap>\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default Draw\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.tsx",["161"],"import { useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport styled from 'styled-components'\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\n\r\ntype wrapperProps = {\r\n    size: number\r\n}\r\n\r\n\r\nconst ChartWrapper = styled.div<wrapperProps>`\r\n    width : ${props => props.size}px\r\n`\r\nconst ScrollDiv = styled.div`\r\n    overflow-x : auto;\r\n`\r\n\r\nconst Chart = () => {\r\n    var list = useSelector((state: StoreState) => state.Reducer.accumulateList);\r\n    var resize = useSelector((state: StoreState) => state.Reducer.resizeOpt);\r\n    var size = useSelector((state: StoreState) => state.Reducer.graphSize);\r\n\r\n\r\n    const expData = {\r\n        labels: list.map(x => `${x[0]}번`),\r\n        datasets: [\r\n            {\r\n                data: list.map(x => x[1]),\r\n                borderWidth: 2,\r\n                hoverBorderWidth: 3,\r\n                backgroundColor:\r\n                    list.map(x => {\r\n                        if (x[0] < 11) return \"#fbc400\"\r\n                        else if (x[0] < 21) return \"#69c8f2\"\r\n                        else if (x[0] < 31) return \"#ff7272\"\r\n                        else if (x[0] < 41) return \"#aaa\"\r\n                        else return \"#b0d840\"\r\n                    })\r\n                ,\r\n            }\r\n        ]\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ScrollDiv>\r\n                <ChartWrapper size={size}>\r\n                    <Bar\r\n                        options={\r\n                            {\r\n                                plugins : {\r\n                                    labels: [\r\n                                        {\r\n                                        render: 'value',\r\n                                        fontStyle : \"bold\"\r\n                                      },\r\n                                    ]\r\n                                },\r\n                                maintainAspectRatio: false,\r\n                                legend: {\r\n                                    display: false\r\n                                },\r\n                                scales: {\r\n                                    yAxes: [{\r\n                                        ticks: {\r\n                                            suggestedMax: list.length >0 ? list[0][1] + list[0][1]*0.1 : 0,\r\n                                            beginAtZero: true\r\n                                        }\r\n                                    }],\r\n                                }\r\n                            }\r\n                        }\r\n                        redraw={resize}\r\n                        data={expData}\r\n                        height={300}\r\n                        width={100}\r\n                    />\r\n                </ChartWrapper>\r\n            </ScrollDiv>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx",["162"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\ChartSelect.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx",["163","164"],"import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport ResultNum from './ResultNum'\r\n\r\nconst NumLineWrapper = styled.p`\r\n    border-bottom : 1px solid rgba(134,134,134,0.19);\r\n    padding-bottom : 15px;\r\n    animation: ${props => props.theme.fadeUp} .5s linear alternate;\r\n`\r\ntype props = {\r\n    content : any\r\n}\r\n\r\nconst NumLineWrap = ({content}:props) => {\r\n    return (\r\n        <NumLineWrapper>\r\n            {content}\r\n        </NumLineWrapper>\r\n    )\r\n}\r\n\r\nexport default NumLineWrap\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx",["165","166","167","168"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\SearchLotto.tsx",["169"],"import { useEffect , useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport LineDiv from '../components/LineDiv'\r\nimport Axios from 'axios'\r\nimport ResultNum from '../components/ResultNum';\r\nimport styled from 'styled-components'\r\n\r\nconst Div = styled.div`\r\n    margin-bottom : 30px;\r\n`\r\n\r\nconst SearchLotto = () => {\r\n    const [select,setSelect] = useState<number>(0)\r\n    const [numList,setNumList] = useState<number[]>([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setRoundSize = (value:number) => {\r\n        dispatch(actionCreators.recentRound(value))\r\n    }\r\n    const setRoundSelect2 = (value:number) => {\r\n        dispatch(actionCreators.roundSelect2(value))\r\n    }\r\n\r\n    var roundSize = useSelector((state:StoreState)=> state.Reducer.recentRound)\r\n\r\n    const getSize = async () => {\r\n        await Axios.post('https://lotto-server-mongo.herokuapp.com/', {query : `\r\n        query{\r\n            roundSize\r\n        }\r\n        `}).then(res => {\r\n            var data = res.data.data.roundSize\r\n            setSelect(data)\r\n            setRoundSelect2(data)\r\n            setRoundSize(data)\r\n            document.getElementById(\"root\")!.style.display = \"block\"\r\n            getNum(data)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    const getNum = async (num : number) => {\r\n        await Axios.post('https://lotto-server-mongo.herokuapp.com/', {query : `\r\n            query{\r\n                winningNum(_id: ${num}){\r\n                    num1 num2 num3 num4 num5 num6 bonus\r\n                }\r\n            }\r\n        `}).then(res=> {\r\n            var obj = res.data.data.winningNum\r\n            var list = []\r\n            for(var data in obj){\r\n                list.push(obj[data])\r\n            }\r\n            setNumList([...list])\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getSize()\r\n    }, [])\r\n\r\n    var arr = new Array(roundSize).fill(0)\r\n    var map = arr.map((x, idx: number) => <option key={idx} value={idx + 1}>{idx + 1}</option>)\r\n\r\n\r\n    const handleChange = (e:any) => {\r\n        setSelect(e.target.value)\r\n        getNum(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Div>\r\n            <LineDiv fontSize={15} content={<div>지난 로또 조회  <select value={select} onChange={handleChange}>{map}</select>회차</div>}></LineDiv>\r\n            <p>{numList.map((x, idx) => {\r\n                if (idx === 6)\r\n                    return (\r\n                        <span key={idx}>+  <ResultNum key={idx} bonus={true} num={x}></ResultNum></span>\r\n                    )\r\n                else\r\n                    return (\r\n                        <ResultNum key={idx} num={x}></ResultNum>\r\n                    )\r\n            })}</p>\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default SearchLotto\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx",["170","171"],"import { useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\ninterface numSpanProps {\r\n    selected?: boolean\r\n}\r\n\r\ninterface props{\r\n    content : number\r\n    click : Function\r\n    selected?: boolean\r\n    id : string\r\n}\r\n//이런 식으로 자주 쓰일 것 같은 css를 만들어놓고 편리하게 사용 가능.\r\n// const hoverForPC = css`\r\n//     &:hover{\r\n//         background : rgb(70, 77, 82);\r\n//         color : white;\r\n//     }\r\n// `\r\nconst NumSpan = styled.button<numSpanProps>`\r\n        @media(max-width : 414px){\r\n            padding : 6px 0px;\r\n            width : 30px;\r\n            font-size : 12px;\r\n        }\r\n        width : 35px;\r\n        outline : 0;\r\n        cursor : pointer;\r\n        border : 0;\r\n        transition:all ease-out .5s;\r\n        padding : 8px 0px;\r\n        margin-bottom : 5px;\r\n        margin-right : 5px;\r\n        background : ${props => props.selected ? \"rgb(70, 77, 82)\" : \"#EAEAEA\"};\r\n        color : ${props => props.selected ? \"white\" : \"unset\"};\r\n        border-radius : 10px;\r\n        font-weight : 600;\r\n        ${sessionStorage.getItem(\"mobile\")===\"true\" ? '': '&:hover{background : rgba(70, 77, 82,.7)}'}\r\n    `\r\n\r\n\r\n\r\n\r\n\r\nconst NumList = ({content,click,selected,id}:props) => {\r\n    \r\n    return (\r\n        <NumSpan id={id} selected={selected} onClick={()=>click(content)}>{content}</NumSpan>\r\n    )\r\n}\r\n\r\nexport default NumList\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\PieChart.tsx",["172","173"],"import { useState, useEffect } from 'react'\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport \"chartjs-plugin-labels\"\r\nimport styled from 'styled-components'\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport { RankResult } from '../models/RankResult';\r\n\r\ntype wrapperProps = {\r\n    size: number\r\n}\r\ntype props = {\r\n    rankList?:RankResult\r\n}\r\n\r\nconst ScrollDiv = styled.div`\r\n    overflow-x : auto;\r\n`\r\nconst ChartWrapper = styled.div<wrapperProps>`\r\n    width : ${props => props.size}px\r\n`\r\n\r\n\r\nconst PieChart = ({rankList}:props) => {\r\n    \r\n    var resize = useSelector((state: StoreState) => state.Reducer.resizeOpt);\r\n    var size = useSelector((state: StoreState) => state.Reducer.graphSize);\r\n\r\n    const expData = {\r\n        labels: [\"1등\", \"2등\",\"3등\",\"4등\",\"5등\",\"꽝\"],\r\n        datasets: [\r\n            {\r\n                data: [rankList?.getFirst, rankList?.getFirst,rankList?.getThird,rankList?.getFourth,rankList?.getFifth,rankList?.getLast],\r\n                borderWidth: 2,\r\n                hoverBorderWidth: 3,\r\n                backgroundColor:\r\n                    [\"#fbc400\", \"#69c8f2\", \"#ff7272\", \"#b0d840\", \"#aaa\"]\r\n                ,\r\n            }\r\n        ]\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ScrollDiv>\r\n                <ChartWrapper size={size-1170}>\r\n                <Doughnut\r\n                    options={{\r\n                        responsive: true,\r\n                        legend: {\r\n                            display: true,\r\n                            position: \"bottom\",\r\n                            labels : {\r\n                                padding : 10,\r\n                                boxWidth : 25,\r\n                                fontStyle : \"bold\",\r\n                                fontSize : 13\r\n\r\n                            }\r\n                        },\r\n\r\n                        plugins: {\r\n                            labels: [\r\n                                {\r\n                                    render: 'label',\r\n                                    arc: true,\r\n                                    position: 'outside',\r\n                                    fontSize : 14,\r\n                                    fontStyle: 'bold'\r\n                                },\r\n                                {\r\n                                    render: 'percentage',\r\n                                    fontSize : 14,\r\n                                    fontStyle: 'bold'\r\n                                }\r\n                            ]\r\n                        }\r\n                    }}\r\n                    redraw={resize}\r\n                    data={expData}\r\n                    height={95}\r\n                    width={100}\r\n                />\r\n                </ChartWrapper>\r\n            </ScrollDiv>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PieChart\r\n",["174","175"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\HallOfFame.tsx",["176","177"],"import { useState, useEffect } from 'react'\r\nimport SubTitle from '../components/SubTitle'\r\nimport Axios from 'axios'\r\nimport ButtonGroup from '../components/ButtonGroup'\r\nimport NumLineWrap from '../components/NumLineWrap'\r\nimport ResultNum from '../components/ResultNum'\r\nimport LineDiv from '../components/LineDiv'\r\nimport { Debounce } from '../Debounce'\r\nimport NobodyWin from '../components/NobodyWin'\r\nimport styled from 'styled-components'\r\n\r\nconst GroupWrapper = styled.div`\r\n    margin-bottom : 15px;\r\n`\r\nconst Section = styled.div`\r\n    ${props=> props.theme.sectionCss}\r\n`\r\n\r\nconst HallOfFame = () => {\r\n\r\n    const getWinData = (rank: string) => {\r\n        Axios.post('https://lotto-server-mongo.herokuapp.com/', {\r\n            query: `\r\n        query{    \r\n            winDataByRank(rank:\"${rank}\"){\r\n                num1 num2 num3 num4 num5 num6 name\r\n            }\r\n        }\r\n        `}).then(res => {\r\n                setNumList(res.data.data.winDataByRank)\r\n            })\r\n    }\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([true, false, false])\r\n    const [numList, setNumList] = useState<any[]>([])\r\n\r\n    useEffect(() => {\r\n        getWinData(\"first\")\r\n    }, [])\r\n\r\n    const selected = Debounce((idx: number) => {\r\n        if(selectBtn[idx]) return\r\n        setSelectBtn(selectBtn.map((i, idx2) => {\r\n            if (idx === idx2) return true\r\n            else return false\r\n        }))\r\n        switch (idx) {\r\n            case 0:\r\n                getWinData(\"first\")\r\n                break;\r\n            case 1:\r\n                getWinData(\"second\")\r\n                break;\r\n            case 2:\r\n                getWinData(\"third\")\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    },200)\r\n\r\n\r\n\r\n    return (\r\n        <Section>\r\n            <SubTitle content={\"명예의 전당\"}></SubTitle>\r\n            <GroupWrapper>\r\n            <LineDiv content={<ButtonGroup content={[\"1등\", \"2등\", \"3등\"]} selected={selectBtn} click={[selected, selected, selected]}></ButtonGroup>}></LineDiv>\r\n            </GroupWrapper>\r\n            {numList.length===0 ? <NobodyWin content=\"당첨된 사람이 없습니다. 당첨에 도전해보세요!\"></NobodyWin>: ''}\r\n            {numList.map(obj => {\r\n                return (\r\n                    <div style={{marginBottom : \"15px\"}}>\r\n                    <LineDiv content={obj.name+\"님\"}></LineDiv>\r\n                    {Object.keys(obj).map(x => {\r\n                        if (x !== \"name\")\r\n                            return <ResultNum num={obj[x][0]} bonusCorrect={obj[x][1] === 2 ? true : false} correct={obj[x][1] === 1 ? true : false}></ResultNum>\r\n                    })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default HallOfFame\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\pages\\UserResult.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js",["178"],"import React from 'react'\r\n\r\n    export function numberCounter(target_frame, target_number, addString) {\r\n        this.count = 0; this.diff = 0;\r\n        this.target_count = parseInt(target_number);\r\n        this.target_frame = document.getElementById(target_frame);\r\n        this.timer = null;\r\n        this.addString = addString\r\n        this.counter();\r\n    };\r\n    numberCounter.prototype.counter = function() {\r\n        var self = this;\r\n        this.diff = this.target_count - this.count;\r\n         \r\n        if(this.diff > 0) {\r\n            self.count += Math.ceil(this.diff / 5);\r\n        }\r\n         \r\n        this.target_frame.innerHTML = this.count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + this.addString;\r\n         \r\n        if(this.count < this.target_count) {\r\n            this.timer = setTimeout(function() { self.counter(); }, 20);\r\n        } else {\r\n            clearTimeout(this.timer);\r\n        }\r\n    };\r\n    \r\n",["179","180"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts",[],{"ruleId":"181","severity":1,"message":"182","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"181","severity":1,"message":"189","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":20},{"ruleId":"190","severity":1,"message":"191","line":150,"column":10,"nodeType":"183","messageId":"192","endLine":150,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":78,"column":8,"nodeType":"195","endLine":78,"endColumn":10,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":46,"column":14,"nodeType":"198","endLine":55,"endColumn":15},{"ruleId":"193","severity":1,"message":"199","line":92,"column":8,"nodeType":"195","endLine":92,"endColumn":10,"suggestions":"200"},{"ruleId":"193","severity":1,"message":"201","line":106,"column":8,"nodeType":"195","endLine":106,"endColumn":10,"suggestions":"202"},{"ruleId":"181","severity":1,"message":"203","line":1,"column":10,"nodeType":"183","messageId":"184","endLine":1,"endColumn":18},{"ruleId":"193","severity":1,"message":"204","line":62,"column":8,"nodeType":"195","endLine":62,"endColumn":19,"suggestions":"205"},{"ruleId":"181","severity":1,"message":"206","line":2,"column":18,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"207","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":37,"column":48,"nodeType":"210","messageId":"211","endLine":37,"endColumn":50},{"ruleId":"190","severity":1,"message":"212","line":64,"column":17,"nodeType":"183","messageId":"192","endLine":64,"endColumn":26},{"ruleId":"190","severity":1,"message":"212","line":74,"column":17,"nodeType":"183","messageId":"192","endLine":74,"endColumn":26},{"ruleId":"193","severity":1,"message":"213","line":126,"column":8,"nodeType":"195","endLine":126,"endColumn":17,"suggestions":"214"},{"ruleId":"193","severity":1,"message":"215","line":67,"column":8,"nodeType":"195","endLine":67,"endColumn":10,"suggestions":"216"},{"ruleId":"181","severity":1,"message":"203","line":1,"column":10,"nodeType":"183","messageId":"184","endLine":1,"endColumn":18},{"ruleId":"181","severity":1,"message":"206","line":2,"column":18,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"181","severity":1,"message":"203","line":1,"column":10,"nodeType":"183","messageId":"184","endLine":1,"endColumn":18},{"ruleId":"181","severity":1,"message":"217","line":1,"column":20,"nodeType":"183","messageId":"184","endLine":1,"endColumn":29},{"ruleId":"185","replacedBy":"218"},{"ruleId":"187","replacedBy":"219"},{"ruleId":"181","severity":1,"message":"220","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":19},{"ruleId":"208","severity":1,"message":"209","line":75,"column":45,"nodeType":"210","messageId":"211","endLine":75,"endColumn":47},{"ruleId":"221","severity":1,"message":"222","line":1,"column":8,"nodeType":"183","messageId":"184","endLine":1,"endColumn":13},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},"@typescript-eslint/no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","no-native-reassign",["223"],"no-negated-in-lhs",["224"],"'RankResult' is defined but never used.","@typescript-eslint/no-redeclare","'bonusCorrect' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUserResult'. Either include it or remove the dependency array.","ArrayExpression",["225"],"Assignments to the 'id' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","CallExpression","React Hook useCallback has missing dependencies: 'id', 'random', 'setCorrect', 'setTrigger', and 'setbonusCorrect'. Either include them or remove the dependency array. If 'setCorrect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["226"],"React Hook useCallback has missing dependencies: 'id', 'setCorrect', 'setTrigger', and 'setbonusCorrect'. Either include them or remove the dependency array. If 'setCorrect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["227"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'select1', 'select2', and 'winGraph'. Either include them or remove the dependency array.",["228"],"'css' is defined but never used.","'ResultNum' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'list2' is already defined.","React Hook useEffect has missing dependencies: 'idx', 'listSize', 'rankResult', 'rankResultNum', 'result', and 'setUserResult'. Either include them or remove the dependency array. If 'setUserResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["229"],"React Hook useEffect has a missing dependency: 'getSize'. Either include it or remove the dependency array.",["230"],"'useEffect' is defined but never used.",["223"],["224"],"'NumLineWrap' is defined but never used.","no-unused-vars","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [setUserResult]",{"range":"243","text":"244"},"Update the dependencies array to be: [id, random, setCorrect, setTrigger, setbonusCorrect]",{"range":"245","text":"246"},"Update the dependencies array to be: [id, setCorrect, setTrigger, setbonusCorrect]",{"range":"247","text":"248"},"Update the dependencies array to be: [roundSize, select1, select2, winGraph]",{"range":"249","text":"250"},"Update the dependencies array to be: [idx, listSize, rankResult, rankResultNum, result, setUserResult, trigger]",{"range":"251","text":"252"},"Update the dependencies array to be: [getSize]",{"range":"253","text":"254"},[2597,2599],"[setUserResult]",[3103,3105],"[id, random, setCorrect, setTrigger, setbonusCorrect]",[3548,3550],"[id, setCorrect, setTrigger, setbonusCorrect]",[1911,1922],"[roundSize, select1, select2, winGraph]",[4674,4683],"[idx, listSize, rankResult, rankResultNum, result, setUserResult, trigger]",[1959,1961],"[getSize]"]