[{"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx":"1","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts":"2","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts":"3","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts":"4","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts":"5","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx":"6","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts":"7","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Footer.tsx":"8","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\SearchLotto.tsx":"9","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\ChartSelect.tsx":"10","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Loading.tsx":"11","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\HallOfFame.tsx":"12","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\UserResult.tsx":"13","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SnsGroup.js":"14","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js":"15","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts":"16","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx":"17","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx":"18","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx":"19","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LoadingSvg.tsx":"20","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx":"21","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx":"22","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx":"23","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NotSpeedMode.tsx":"24","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SpeedMode.tsx":"25","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx":"26","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx":"27","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.js":"28","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\Kakao.tsx":"29","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\NaverBlog.tsx":"30","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\KakaoStory.tsx":"31","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\CopyUrl.tsx":"32","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\FaceBook.tsx":"33","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts":"34","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts":"35","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx":"36","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Draw.tsx":"37","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx":"38","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx":"39","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx":"40","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx":"41","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx":"42","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx":"43","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineChart.js":"44","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\FakeLotto.tsx":"45","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UpdateInterval.ts":"46","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\ChartStore.ts":"47","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Throttle.ts":"48","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\InsertHOF.tsx":"49","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LottoLogo.tsx":"50"},{"size":1138,"mtime":1610097449269,"results":"51","hashOfConfig":"52"},{"size":425,"mtime":1608424066436,"results":"53","hashOfConfig":"52"},{"size":648,"mtime":1610115238601,"results":"54","hashOfConfig":"52"},{"size":793,"mtime":1610201110285,"results":"55","hashOfConfig":"52"},{"size":316,"mtime":1610012266712,"results":"56","hashOfConfig":"52"},{"size":1333,"mtime":1610200103958,"results":"57","hashOfConfig":"52"},{"size":5291,"mtime":1609916006303,"results":"58","hashOfConfig":"52"},{"size":946,"mtime":1610033372485,"results":"59","hashOfConfig":"52"},{"size":3670,"mtime":1610201786401,"results":"60","hashOfConfig":"52"},{"size":3625,"mtime":1610091218402,"results":"61","hashOfConfig":"52"},{"size":849,"mtime":1609903065409,"results":"62","hashOfConfig":"52"},{"size":5904,"mtime":1610188872863,"results":"63","hashOfConfig":"52"},{"size":4944,"mtime":1610067530523,"results":"64","hashOfConfig":"52"},{"size":4702,"mtime":1610116182912,"results":"65","hashOfConfig":"52"},{"size":948,"mtime":1609915174483,"results":"66","hashOfConfig":"52"},{"size":894,"mtime":1608892886260,"results":"67","hashOfConfig":"52"},{"size":1155,"mtime":1609911715261,"results":"68","hashOfConfig":"52"},{"size":1222,"mtime":1610189308624,"results":"69","hashOfConfig":"52"},{"size":2725,"mtime":1610201105781,"results":"70","hashOfConfig":"52"},{"size":3486,"mtime":1610031441243,"results":"71","hashOfConfig":"52"},{"size":449,"mtime":1609915393542,"results":"72","hashOfConfig":"52"},{"size":586,"mtime":1609903065409,"results":"73","hashOfConfig":"52"},{"size":1190,"mtime":1610067537706,"results":"74","hashOfConfig":"52"},{"size":11050,"mtime":1610098326960,"results":"75","hashOfConfig":"52"},{"size":8250,"mtime":1610190310955,"results":"76","hashOfConfig":"52"},{"size":6332,"mtime":1610201751641,"results":"77","hashOfConfig":"52"},{"size":4645,"mtime":1610117627625,"results":"78","hashOfConfig":"52"},{"size":4874,"mtime":1610113940734,"results":"79","hashOfConfig":"52"},{"size":1516,"mtime":1609834470317,"results":"80","hashOfConfig":"52"},{"size":2349,"mtime":1609834477653,"results":"81","hashOfConfig":"52"},{"size":576,"mtime":1609834473966,"results":"82","hashOfConfig":"52"},{"size":2066,"mtime":1609834454911,"results":"83","hashOfConfig":"52"},{"size":567,"mtime":1609834464326,"results":"84","hashOfConfig":"52"},{"size":1048,"mtime":1609896832788,"results":"85","hashOfConfig":"52"},{"size":1199,"mtime":1609597407856,"results":"86","hashOfConfig":"52"},{"size":1499,"mtime":1610201103462,"results":"87","hashOfConfig":"52"},{"size":6710,"mtime":1610076557716,"results":"88","hashOfConfig":"52"},{"size":794,"mtime":1609906234168,"results":"89","hashOfConfig":"52"},{"size":1301,"mtime":1609908377917,"results":"90","hashOfConfig":"52"},{"size":830,"mtime":1609914410016,"results":"91","hashOfConfig":"52"},{"size":1394,"mtime":1609914442224,"results":"92","hashOfConfig":"52"},{"size":6468,"mtime":1610153878768,"results":"93","hashOfConfig":"52"},{"size":606,"mtime":1609514815835,"results":"94","hashOfConfig":"52"},{"size":11638,"mtime":1610075728525,"results":"95","hashOfConfig":"52"},{"size":3797,"mtime":1610091270592,"results":"96","hashOfConfig":"52"},{"size":5008,"mtime":1610155544611,"results":"97","hashOfConfig":"52"},{"size":5079,"mtime":1610024301046,"results":"98","hashOfConfig":"52"},{"size":303,"mtime":1610028975300,"results":"99","hashOfConfig":"52"},{"size":1791,"mtime":1610189800232,"results":"100","hashOfConfig":"52"},{"size":87981,"mtime":1610200347908,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1w0125e",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx",[],["214","215"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx",["216"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts",["217"],"// types\r\n\r\n//interface를 통해 타입을 정해준다.\r\nexport interface State {\r\n  list: number[][];\r\n  accumulateList: number[][];\r\n  graphSize: number;\r\n  drawCheck: boolean;\r\n  corrected: boolean[];\r\n  bonusCorrect: boolean[];\r\n  recentRound: number;\r\n  resultTrigger: boolean;\r\n  roundSelect1: number\r\n  roundSelect2: number\r\n  userResult: any\r\n}\r\n\r\n//액션 타입\r\nexport const LIST = \"LIST\";\r\nexport const ALIST = \"ALIST\";\r\nexport const RESIZE = \"RESIZE\";\r\nexport const GRAPHSIZE = \"GRAPHSIZE\";\r\nexport const DRAWCHECK = \"DRAWCHECK\";\r\nexport const CORRECTED = \"CORRECTED\";\r\nexport const BONUSCORRECT = \"BONUSCORRECT\";\r\nexport const RECENTROUND = \"RECENTROUND\";\r\nexport const TRIGGER = \"TRIGGER\";\r\nexport const ROUNDSELECT1 = \"ROUNDSELECT1\"\r\nexport const ROUNDSELECT2 = \"ROUNDSELECT2\"\r\nexport const USERRESULT = \"USERRESULT\"\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\ninterface ListAction {\r\n  newList: number[][];\r\n  type: typeof LIST;\r\n}\r\n\r\ninterface AccumulateListAction {\r\n  newList: number[][];\r\n  type: typeof ALIST;\r\n}\r\n\r\ninterface GraphSize {\r\n  size: number;\r\n  type: typeof GRAPHSIZE;\r\n}\r\ninterface DrawCheck {\r\n  value: boolean;\r\n  type: typeof DRAWCHECK;\r\n}\r\ninterface Corrected {\r\n  value: boolean[];\r\n  type: typeof CORRECTED;\r\n}\r\ninterface bonusCorrect {\r\n  value: boolean[];\r\n  type: typeof BONUSCORRECT;\r\n}\r\ninterface RecentRound {\r\n  value: number;\r\n  type: typeof RECENTROUND;\r\n}\r\n\r\ninterface ResultTrigger {\r\n  value: boolean;\r\n  type: typeof TRIGGER;\r\n}\r\ninterface RoundSelect1 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT1;\r\n}\r\ninterface RoundSelect2 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT2;\r\n}\r\ninterface UserResult {\r\n  value: any;\r\n  type: typeof USERRESULT;\r\n}\r\n\r\ntype ActionTypes = ListAction |\r\n  AccumulateListAction |\r\n  GraphSize |\r\n  DrawCheck | Corrected |\r\n  RecentRound |\r\n  ResultTrigger |\r\n  bonusCorrect |\r\n  RoundSelect1 |\r\n  RoundSelect2 | \r\n  UserResult\r\n// interface ActionTypes {\r\n//   actionTypes : ListAction | List2Action\r\n// }\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction list(newList: number[][]) {\r\n  return {\r\n    type: LIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction accumulateList(newList: number[]) {\r\n  return {\r\n    type: ALIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction graphSizeUp(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction graphSizeDown(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction drawCheck(value: boolean) {\r\n  return {\r\n    type: DRAWCHECK,\r\n    value: value\r\n  };\r\n}\r\nfunction corrected(value: boolean[]) {\r\n  return {\r\n    type: CORRECTED,\r\n    value: value\r\n  };\r\n}\r\nfunction bonusCorrect(value: boolean[]) {\r\n  return {\r\n    type: BONUSCORRECT,\r\n    value: value\r\n  };\r\n}\r\nfunction recentRound(value: number) {\r\n  return {\r\n    type: RECENTROUND,\r\n    value: value\r\n  };\r\n}\r\nfunction resultTrigger(value: boolean) {\r\n  return {\r\n    type: TRIGGER,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect1(value: number) {\r\n  return {\r\n    type: ROUNDSELECT1,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect2(value: number) {\r\n  return {\r\n    type: ROUNDSELECT2,\r\n    value: value\r\n  };\r\n}\r\nfunction userResult(value: any) {\r\n  return {\r\n    type: USERRESULT,\r\n    value: value\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  list, accumulateList, graphSizeUp, graphSizeDown, drawCheck, corrected, recentRound, resultTrigger, bonusCorrect, roundSelect1, roundSelect2, userResult\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: State = {\r\n  list: [[]],\r\n  accumulateList: [],\r\n  graphSize: 1160,\r\n  drawCheck: false,\r\n  corrected: [],\r\n  bonusCorrect: [],\r\n  recentRound: 0,\r\n  resultTrigger: false,\r\n  roundSelect1: 1,\r\n  roundSelect2: 1,\r\n  userResult: {\r\n    first : 0,\r\n    second : 0,\r\n    third : 0,\r\n    fourth : 0,\r\n    fifth : 0,\r\n    last : 0\r\n  }\r\n};\r\n\r\n// reducers\r\nexport function Reducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): State {\r\n  switch (action.type) {\r\n    case LIST:\r\n      return {\r\n        ...state,\r\n        list: action.newList\r\n      };\r\n    case ALIST:\r\n      return {\r\n        ...state,\r\n        accumulateList: action.newList\r\n      };\r\n    case GRAPHSIZE:\r\n      return {\r\n        ...state,\r\n        graphSize: action.size\r\n      };\r\n    case DRAWCHECK:\r\n      return {\r\n        ...state,\r\n        drawCheck: action.value\r\n      };\r\n    case CORRECTED:\r\n      return {\r\n        ...state,\r\n        corrected: action.value\r\n      };\r\n    case BONUSCORRECT:\r\n      return {\r\n        ...state,\r\n        bonusCorrect: action.value\r\n      };\r\n    case RECENTROUND:\r\n      return {\r\n        ...state,\r\n        recentRound: action.value\r\n      };\r\n    case TRIGGER:\r\n      return {\r\n        ...state,\r\n        resultTrigger: action.value\r\n      };\r\n    case ROUNDSELECT1:\r\n      return {\r\n        ...state,\r\n        roundSelect1: action.value\r\n      };\r\n    case ROUNDSELECT2:\r\n      return {\r\n        ...state,\r\n        roundSelect2: action.value\r\n      };\r\n      case USERRESULT:\r\n      return {\r\n        ...state,\r\n        userResult: action.value\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Footer.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\SearchLotto.tsx",["218","219","220"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\ChartSelect.tsx",["221"],"import { useState } from 'react'\r\nimport AccumulateChart from '../components/AccumulateChart'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/ChartStore';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport SubTitle from '../components/SubTitle';\r\nimport ButtonGroup from '../components/ButtonGroup';\r\nimport UserChart from '../components/UserChart';\r\nimport styled from 'styled-components'\r\nimport { Debounce } from '../Debounce'\r\n//실제 로또 통계와 가상로또 통계를 담고 있는 섹션\r\nconst FlexDiv = styled.div`\r\n    display : inline-flex;\r\n    line-height : 1;\r\n    margin-right : 10px;\r\n`\r\nconst Section = styled.section`\r\n    ${props => props.theme.sectionCss}\r\n`\r\nconst ChartSelect = () => {\r\n\r\n    const dispatch = useDispatch(); // 디스패치 함수를 가져옵니다\r\n\r\n    //공통으로 쓰일 리스트 액션\r\n    const addAList = (newList: number[]) => {\r\n        dispatch(actionCreators.chartList(newList))\r\n    }\r\n    //차트 사이즈업 액션\r\n    const graphSizeUp = (size: number) => {\r\n        dispatch(actionCreators.graphSizeUp(size))\r\n    }\r\n    //차트 사이즈다운 액션\r\n    const graphSizeDown = (size: number) => {\r\n        dispatch(actionCreators.graphSizeDown(size))\r\n    }\r\n    \r\n    const setMainList = (value:any) => {\r\n        dispatch(actionCreators.chartMainData(value))\r\n    }\r\n    //차트 사이즈\r\n    var size = useSelector((state: StoreState) => state.Reducer.graphSize);\r\n\r\n    //차트 사이즈업\r\n    const sizeUp = (idx: number) => {\r\n        btnStateChange(idx)\r\n        graphSizeUp(size + 400)\r\n        document.getElementById(\"myChart\")!.style.width = `${size + 400}px`\r\n    }\r\n\r\n    //차트 사이즈다운\r\n    const sizeDown = (idx: number) => {\r\n        if (size < 361) return\r\n        btnStateChange(idx)\r\n        graphSizeDown(size - 400)\r\n        document.getElementById(\"myChart\")!.style.width = `${size - 400}px`\r\n    }\r\n\r\n    //토글 버튼\r\n    const [btnSelect, setBtnSelect] = useState<any[]>([])\r\n    const [graphSelect, setGraphSelect] = useState<any[]>([true, false])\r\n\r\n    //버튼 그룹이 3개이상일 때를 대비해서 반복을 통해 선택된 버튼만 true로 만듦. 근데 버튼을 두개씩만 써서 사실 필요없음 ...\r\n    const btnStateChange = Debounce((idx: number) => {\r\n        btnSelect[idx] = true\r\n        setBtnSelect(btnSelect.map((i, idx2) => {\r\n            if (idx2 === idx) return true\r\n            else return false;\r\n        }))\r\n    }, 200)\r\n\r\n    //차트 전환\r\n    const selected2 = Debounce((idx: number) => {\r\n        setMainList([]) //값을 초기화하지 않고 그래프를 바꾸면 이전 값의 잔상이 남는다.\r\n        graphSelect[idx] = true\r\n        setGraphSelect(graphSelect.map((i, idx2) => {\r\n            if (idx2 === idx) return true\r\n            else return false;\r\n        }))\r\n    }, 200)\r\n    return (\r\n        <Section>\r\n            <SubTitle content=\"로또 분석 그래프\"></SubTitle>\r\n            <FlexDiv>\r\n                <ButtonGroup id={[\"graphBtn1\",\"graphBtn2\"]} selectBg=\"rgba(235, 83, 116,.12)\" selectColor=\"rgb(235, 83, 116)\" selected={graphSelect} content={[\"실제 로또 통계\", \"가상 로또 통계\"]} click={[selected2, selected2]}></ButtonGroup>\r\n                <ButtonGroup id={[\"sizeUpBtn\",\"sizeDownBtn\"]} selected={btnSelect} content={[\"확대\", \"축소\"]} click={[sizeUp, sizeDown]}></ButtonGroup>\r\n            </FlexDiv>\r\n\r\n            {graphSelect[0] ? <AccumulateChart/>: <UserChart/>}\r\n\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default ChartSelect\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Loading.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\HallOfFame.tsx",["222"],"import { useState, useEffect, useRef } from 'react'\r\nimport SubTitle from '../components/SubTitle'\r\nimport Axios from 'axios'\r\nimport ButtonGroup from '../components/ButtonGroup'\r\nimport ResultNum from '../components/ResultNum'\r\nimport LineDiv from '../components/LineDiv'\r\nimport { Debounce } from '../Debounce'\r\nimport { throttling } from '../Throttle'\r\nimport NobodyWin from '../components/NobodyWin'\r\nimport styled from 'styled-components'\r\nimport LoadingSvg from '../components/LoadingSvg'\r\nimport { List } from 'react-virtualized';\r\n\r\n//명예의 전당\r\ntype props = {\r\n    check: boolean\r\n}\r\n\r\nconst GroupWrapper = styled.div`\r\n    margin-bottom : 15px;\r\n`\r\nconst ScrollList = styled.div`\r\n    overflow-y : auto;\r\n    max-height : ${window.innerHeight / 2}px;\r\n`\r\n\r\nconst Section = styled.div`\r\n    ${props => props.theme.sectionCss}\r\n`\r\n\r\nconst NumWrapper = styled.div<props>`\r\n    background : ${props => props.check ? \"rgba(224,230,251,.35)\" : \"none\"};\r\n    padding : 10px 0;\r\n    border-radius : 10px;\r\n`\r\n\r\nconst NameSpan = styled.span`\r\n    font-size : 12px;\r\n    font-weight : 600;\r\n    margin-bottom : 10px;\r\n    text-decoration : underline;\r\n    display : block;\r\n`\r\n\r\n\r\nconst HallOfFame = () => {\r\n\r\n    const getWinData = (rankData: string, pageData: number) => {\r\n\r\n        Axios.post(`${process.env.REACT_APP_URL}/`, {\r\n            query: `\r\n        query{    \r\n            winDataByRank(rank:\"${rankData}\",page:${pageData}){\r\n                num1 num2 num3 num4 num5 num6 name time\r\n            }\r\n        }\r\n        `}).then(res => {\r\n                rank.current = rankData\r\n                page.current = pageData\r\n                var data = res.data.data.winDataByRank\r\n\r\n                if(data.length===0&&pageData!==0) return\r\n\r\n                else if(data.length<10){\r\n                    document.getElementById(\"loadingIcon\")?.remove()\r\n                } \r\n                if (pageData === 0)\r\n                    setNumList(data)\r\n                else\r\n                    setNumList([...numList, ...data])\r\n            })\r\n    }\r\n    //토글 버튼\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([true, false, false])\r\n    //받아온 win데이터\r\n    const [numList, setNumList] = useState<any[]>([])\r\n    const page = useRef(0)\r\n    const rank = useRef(\"first\")\r\n\r\n    useEffect(() => {\r\n        //초기값은 1등한 사람\r\n        getWinData(\"first\", 0)\r\n    }, [])\r\n\r\n    //토글 버튼 state변경 및 데이터 가져오기\r\n    const selected = Debounce((idx: number) => {\r\n        if (selectBtn[idx]) return\r\n        setSelectBtn(selectBtn.map((i, idx2) => {\r\n            if (idx === idx2) return true\r\n            else return false\r\n        }))\r\n        switch (idx) {\r\n            case 0:\r\n                getWinData(\"first\", 0)\r\n                break;\r\n            case 1:\r\n                getWinData(\"second\", 0)\r\n                break;\r\n            case 2:\r\n                getWinData(\"third\", 0)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, 200)\r\n\r\n    const scrollEvent = throttling(() => {\r\n        var scrollDiv: any = document.getElementById(\"scrollDiv\")\r\n        var scrollHeight = scrollDiv?.scrollHeight\r\n        var htmlHeight = scrollDiv?.clientHeight\r\n        var scrollPosition = scrollDiv?.scrollTop\r\n        if (scrollHeight < Math.round(scrollPosition) + htmlHeight + 150) {\r\n             getWinData(rank.current, page.current + 10)\r\n        }\r\n\r\n    }, 800)\r\n    const rowRenderer = (\r\n        () => {\r\n            return (\r\n                <ScrollList id=\"scrollDiv\" onScroll={scrollEvent}>\r\n                {numList.length === 0 ? <NobodyWin content=\"당첨된 사람이 없습니다. 당첨에 도전해보세요!\"></NobodyWin> : ''}\r\n                {numList.map((obj, idx) => {\r\n                    var numCheck = idx % 2 === 0 ? true : false\r\n                    return (\r\n\r\n                        <NumWrapper key={idx} check={numCheck}>\r\n                            <NameSpan>{obj.name}-{obj.time.substr(0,4)}년 {obj.time.substr(4,2)}월 {obj.time.substr(6,2)}일</NameSpan>\r\n                            {Object.keys(obj).map((x, idx) => {\r\n                                if (x !== \"name\"&& x!==\"time\") //이름은 위에서 출력하기 때문에 건너뛰어준다. 1과 2는 맞춘 번호와 맞춘 보너스 번호를 검증하기 위함이다. \r\n                                    return <ResultNum key={idx} num={obj[x][0]} bonusCorrect={obj[x][1] === 2 ? true : false} correct={obj[x][1] === 1 ? true : false}></ResultNum>\r\n                                return undefined\r\n                            })}\r\n                        </NumWrapper>\r\n                    )\r\n                })}\r\n                {numList.length>9 ? <div><LoadingSvg id=\"loadingIcon\"></LoadingSvg></div> : \"\"}\r\n            </ScrollList>\r\n            );\r\n        })\r\n\r\n\r\n    return (\r\n        <Section id=\"HOF\">\r\n            <SubTitle content={\"명예의 전당\"}></SubTitle>\r\n            <GroupWrapper>\r\n                <LineDiv content={<ButtonGroup id={[\"HOF1\",\"HOF2\",\"HOF3\"]} content={[\"1등\", \"2등\", \"3등\"]} selected={selectBtn} click={[selected, selected, selected]}></ButtonGroup>}></LineDiv>\r\n            </GroupWrapper>\r\n            \r\n            <List\r\n                width={1}\r\n                height={1}\r\n                overscanRowsCount={1}\r\n                rowCount={1}\r\n                rowHeight={40}\r\n                rowRenderer={rowRenderer}\r\n                containerStyle={{\r\n                    width: \"100%\",\r\n                    maxWidth: \"100%\",\r\n                    height: \"100%\",\r\n                    maxHeight: \"100%\"\r\n                }}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            >\r\n            </List>\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default HallOfFame\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\UserResult.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SnsGroup.js",[],["223","224"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LoadingSvg.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NotSpeedMode.tsx",["225"],"\r\nimport React, { useState, useEffect , useRef} from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '../components/Button';\r\nimport { List } from 'react-virtualized';\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\n\r\nimport Draw from '../sections/Draw';\r\nimport NumList from '../components/NumList';\r\nimport NumLineWrap from '../components/NumLineWrap';\r\nimport Rank from '../components/Rank';\r\nimport DeleteSvg from '../components/DeleteSvg';\r\nimport { RankResultNum } from '../models/RankResultNum';\r\nimport { RankResult } from '../models/RankResult';\r\n\r\n//번호 리스트 스크롤 \r\nconst ScrollList = styled.div`\r\n    overflow-y : auto;\r\n    max-height : ${window.innerHeight / 2}px;\r\n`\r\nconst ListIdxSpan = styled.span`\r\n    float : left;\r\n    margin-left : 10px;\r\n    font-weight : 600;\r\n    font-size : .9em;\r\n    margin-top : 4px;\r\n`\r\n\r\nconst SmallSpan = styled.span`\r\n    color : gray;\r\n    font-size : 12px;\r\n    display : flex;\r\n    flex-direction : column-reverse;\r\n`\r\ntype props = {\r\n    list: number[][]\r\n    draw: boolean\r\n    correct: boolean[]\r\n    bonusCorrect: boolean[]\r\n    trigger: boolean\r\n    setList: Function\r\n    setDraw: Function\r\n    setCorrect: Function\r\n    setbonusCorrect: Function\r\n    setTrigger: Function\r\n    setUserResult: Function\r\n}\r\n\r\nconst NotSpeedMode = ({ list, draw, correct, bonusCorrect, trigger, setList, setUserResult, setDraw, setTrigger, setCorrect, setbonusCorrect }: props) => {\r\n    //번호 선택 배열. 당첨번호 선택번호 등 state로 관리하는 이유는 스타일 컴포넌트의 props 변경을 위해서다.\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([])\r\n\r\n    useEffect(() => {\r\n        //로컬스토리지에 있는 유저의 로또 내역 state에 저장\r\n        var result = localStorage.getItem(\"userResult\")\r\n        if (result) setUserResult(JSON.parse(result))\r\n    }, [])\r\n    //번호 선택 이벤트\r\n    const select = (num: number) => {\r\n        if (limit()) return\r\n        if (list[list.length - 1].includes(num)) {\r\n            //번호 선택 해제. 배열에서 제거하고 스타일 변경을 위해 false로 변경.\r\n            list[list.length - 1].splice(list[list.length - 1].indexOf(num), 1)\r\n            selectBtn[num - 1] = false\r\n            setSelectBtn([...selectBtn])\r\n            setList([...list])\r\n        }\r\n        else if (list[list.length - 1].length === 6) return\r\n        else {\r\n            selectBtn[num - 1] = true\r\n            setSelectBtn([...selectBtn])\r\n            list[list.length - 1].push(num)\r\n            setList([...list])\r\n        }\r\n    }\r\n\r\n\r\n    //로또 번호 버튼배열 생성\r\n    let allNum: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]\r\n    let map = allNum.map((x, idx) => <NumList key={idx} content={x} selected={selectBtn[idx]} id={`btn${x}`} click={select}></NumList>)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //전체 상태 초기화\r\n    const reset = () => {\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setTrigger(false)\r\n        setDraw(false)\r\n        setSelectBtn([])\r\n        setList([[]])\r\n    }\r\n\r\n    //번호 확정 시 추첨기 ON\r\n    const submit = () => {\r\n        if (list[list.length - 1].length < 6) {\r\n            alert(\"총 6개의 번호를 선택해주세요\")\r\n            return\r\n        }\r\n        if (window.confirm(`선택한 로또번호로 추첨하시겠습니까?`)) {\r\n            setDraw(true)\r\n        }\r\n    }\r\n\r\n    //추첨 후에 버튼 조작 못하게\r\n    const afterDraw = () => {\r\n        if (document.getElementById('resetBtn')&&!document.getElementById(\"beforeDrawNotice\")) {\r\n            if (window.confirm(\"추첨이 시작된 로또이므로 번호를 추가할 수 없습니다. 초기화하시겠습니까?\")) {\r\n                reset()\r\n                return true\r\n            }\r\n            else return true\r\n        }\r\n        else return false\r\n    }\r\n\r\n    //최대 100장까지 구매제한\r\n    const limit = () => {\r\n        if (afterDraw()) return true\r\n        var count: any = document.getElementById(\"lottoList\")?.childElementCount\r\n        if (count > 100) {\r\n            alert(\"1회 10만원까지만 제공됩니다.\")\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    //랜덤뽑기. 번호 선택 6개까지 남은 n개의 수를 랜덤으로 클릭. true를 파라미터로 10회 뽑기 여부 판단\r\n    const random = (tenReps: boolean) => {\r\n        if (limit()) return\r\n        var length: number = list[list.length - 1].length\r\n        for (var i = 0; i < 6 - length; i++) {\r\n            while (true) {\r\n                var num: number = Math.floor((Math.random() * 45) + 1)\r\n                if (!list[list.length - 1].includes(num)) {\r\n                    document.getElementById(`btn${num}`)?.click()\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //랜덤 10회 뽑기 최대 100회까지 제한.\r\n        if (tenReps) {\r\n            var count: any = document.getElementById(\"lottoList\")?.childElementCount\r\n            if (count > 99) {\r\n                alert(\"1회 10만원까지만 제공됩니다.\")\r\n                return\r\n            }\r\n            document.getElementById(\"loadingBg\")!.style.display = \"block\";\r\n            if (count + 10 > 100)\r\n                random11(100)\r\n            else\r\n                random11(count < 10 ? count + 9 : count + 10)\r\n        }\r\n    }\r\n\r\n    const random11 = (count: number) => {\r\n        if (document.getElementById(\"lottoList\")?.childElementCount === count) {\r\n            document.getElementById(\"loadingBg\")!.style.display = \"none\";\r\n            return\r\n        }\r\n        document.getElementById(\"lineAdd\")?.click()\r\n        setTimeout(() => {\r\n            document.getElementById(`randomBtn`)?.click()\r\n            random11(count)\r\n        }, 1);\r\n\r\n    }\r\n\r\n\r\n\r\n    //로또 한줄 추가\r\n    const addLine = () => {\r\n        if (list[list.length - 1].length < 6) return\r\n        if (limit()) return\r\n        list.push([])\r\n        setList([...list])\r\n        setSelectBtn([])\r\n        var node: any = document.getElementById(\"lottoList\")\r\n        setTimeout(() => {\r\n            node.scrollTo(0, node.clientHeight + 10000)\r\n        }, 10);\r\n    }\r\n\r\n    //한줄 초기화. 줄 자체를 제거하지는 않고 선택번호만 초기화\r\n    const resetOneLine = () => {\r\n        list[list.length - 1] = []\r\n        setSelectBtn([])\r\n        setList([...list])\r\n    }\r\n\r\n    //줄 삭제\r\n    const deleteSelectLine = (idx: number) => {\r\n        if (list.length === idx + 1) setSelectBtn([])\r\n        deleteLine(idx)\r\n    }\r\n\r\n    const deleteLine = (idx: number) => {\r\n        list.splice(idx, 1)\r\n        setList([...list])\r\n    }\r\n\r\n\r\n    //react virtualized \r\n    const rowRenderer = (\r\n        () => {\r\n            return (\r\n                <ScrollList id=\"lottoList\">\r\n                    {list.map((i, idx) => <NumLineWrap key={idx} idx={idx} content={list[idx].length === 0 ?\r\n                        (list.length > 1 ? //2개이상부터는 삭제가능하게 Btn추가\r\n                            <SmallSpan>새 번호를 선택해주세요\r\n                             <Button\r\n                                    hoverBg=\"#EAEAEA\"\r\n                                    bg=\"none\"\r\n                                    content={<DeleteSvg />}\r\n                                    click={() => deleteSelectLine(idx)} />\r\n                            </SmallSpan>\r\n                            : <SmallSpan >새 번호를 선택해주세요</SmallSpan>)\r\n\r\n                        : <span>{trigger ? //추첨 끝나면 Rank계산\r\n                            <Rank\r\n                                setUserResult={setUserResult}\r\n                                rankResultNum={rankResultNum}\r\n                                rankResult={rankResult}\r\n                                listSize={list.length}\r\n                                idx={idx}\r\n                                list={list[idx]}\r\n                                correct={correct}\r\n                                bonusCorrect={bonusCorrect}\r\n                                trigger={trigger} /> : ''}\r\n\r\n                            <ListIdxSpan>{idx + 1}번</ListIdxSpan>\r\n                            {list[idx].sort((a, b) => a - b).map((x, idx2) =>\r\n                                //번호 6개\r\n                                <ResultNum key={idx2} bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x} />)}\r\n\r\n                            {idx > 0 ?\r\n                                <Button float=\"right\" hoverBg=\"#EAEAEA\" bg=\"none\" content={<DeleteSvg />} click={() => deleteSelectLine(idx)} />\r\n                                : ''}</span>} />)}\r\n                </ScrollList>\r\n            );\r\n        })\r\n\r\n    //계산에 쓰일 클래스 \r\n    var rankResult = useRef(new RankResult())\r\n    var rankResultNum = useRef(new RankResultNum())\r\n    return (\r\n        <div>\r\n            {map}\r\n            <div>\r\n            <Button id=\"randomBtn\" fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"나머지 랜덤\" click={() => random(false)} />\r\n            <Button id=\"lineAdd\" fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"한 줄 추가\" click={addLine} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"현재 줄 초기화\" click={resetOneLine} />\r\n            </div>\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(235, 83, 116)\" bg=\"rgba(235, 83, 116, 0.12)\" hoverBg=\"rgb(235, 83, 116)\" content=\"전체초기화\" click={reset} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(255,94,0)\" bg=\"rgba(255,94,0,.12)\" hoverBg=\"rgb(255,94,0)\" content=\"만원 어치\" click={() => random(true)} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(255,94,0)\" bg=\"rgba(255,94,0,.12)\" hoverBg=\"rgb(255,94,0)\" content=\"추첨하기\" click={submit} />\r\n            {draw ? <Draw mode={false} bonusCorrect={bonusCorrect} setbonusCorrect={setbonusCorrect} trigger={trigger} setTrigger={setTrigger} list={list} setDraw={setDraw} setCorrect={setCorrect} correct={correct} /> : ''}\r\n            <LineDiv fontSize={15} content=\"내가 뽑은 로또 번호\" />\r\n            <List\r\n                width={1}\r\n                height={1}\r\n                overscanRowsCount={1}\r\n                rowCount={1}\r\n                rowHeight={40}\r\n                rowRenderer={rowRenderer}\r\n                containerStyle={{\r\n                    width: \"100%\",\r\n                    maxWidth: \"100%\",\r\n                    height: \"100%\",\r\n                    maxHeight: \"100%\"\r\n                }}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotSpeedMode","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SpeedMode.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx",["226","227"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx",["228","229","230"],"import React, { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport Chart from './Chart'\r\nimport ButtonGroup from './ButtonGroup';\r\nimport styled from 'styled-components'\r\nimport LineDiv from './LineDiv';\r\nimport { Debounce } from '../Debounce'\r\nimport PieChart from './LineChart';\r\nimport { RankResult } from '../models/RankResult';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/ChartStore';\r\nimport Button from './Button';\r\nimport Arrow from './Arrow';\r\n//유저들의 로또 결과를 보여주는 그래프\r\n\r\nconst FlexDiv = styled.div`\r\n    display : inline-flex;\r\n    line-height : 1;\r\n    margin-right : 10px;\r\n`\r\n\r\nconst Span = styled.span`\r\n    font-size : .8em;\r\n    color : gray;\r\n    margin-right : 10px;\r\n    margin-top : 10px;\r\n    word-break : keep-all;\r\n`\r\n\r\nconst UserChart = () => {\r\n\r\n\r\n    // const getRankData = async () => {\r\n    //     Axios.post(`${process.env.REACT_APP_URL}/`, {query : `\r\n    //     query{\r\n    //         resultSum(_id:\"id\"){\r\n    //             first second third fourth fifth last\r\n    //         }\r\n    //     }\r\n    //     `}).then(res => {\r\n    //         setRankList(new RankResult(res.data.data.resultSum))\r\n    //     })\r\n    // }\r\n\r\n    // const getWinData = async () => {\r\n    //     Axios.get(`${process.env.REACT_APP_URL}/userWinNum`).then(res => {\r\n    //         addAList(res.data)\r\n    //     })\r\n    // }\r\n    const MainList = useSelector((state: StoreState) => state.ChartReducer.chartMainData)\r\n    const userChartList = useSelector((state: StoreState) => state.ChartReducer.userChartList)\r\n    const userChartSum = useSelector((state: StoreState) => state.ChartReducer.userChartSum)\r\n    const sortBtn = useSelector((state: StoreState) => state.ChartReducer.sortBtn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setMainList = (value: any) => {\r\n        dispatch(actionCreators.chartMainData(value))\r\n    }\r\n    const setSortBtn = () => {\r\n        dispatch(actionCreators.sortBtn())\r\n    }\r\n    useEffect(() => {\r\n        if (btnSelect[0]) {\r\n            if (sortBtn){\r\n             setMainList([...userChartSum.sort((a: any, b: any) => a[1] - b[1])])\r\n            }\r\n            else{\r\n                setMainList([...userChartSum.sort((a: any, b: any) => b[1] - a[1])])\r\n            }\r\n        }\r\n        else {\r\n            if (sortBtn){\r\n             setMainList([...userChartList.sort((a: any, b: any) => a[1] - b[1])])\r\n            }\r\n            else\r\n            setMainList([...userChartList.sort((a: any, b: any) => b[1] - a[1])])\r\n        }\r\n    }, [userChartSum])\r\n\r\n    //버튼 토글 \r\n    const [btnSelect, setBtnSelect] = useState<boolean[]>([true, false])\r\n\r\n    //버튼 클릭 이벤트\r\n    const selected = (idx: number) => {\r\n        btnSelect[idx] = true\r\n        setBtnSelect(btnSelect.map((i, idx2) => {\r\n            if (idx2 === idx) return true\r\n            else return false;\r\n        }))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const rankChart = Debounce((idx: number) => {\r\n        if (btnSelect[idx]) return\r\n        selected(idx)\r\n        if (sortBtn)\r\n            setMainList([...userChartSum.sort((a: any, b: any) => a[1] - b[1])])\r\n        else\r\n            setMainList([...userChartSum.sort((a: any, b: any) => b[1] - a[1])])\r\n        setMainList(userChartSum)\r\n        \r\n    }, 200)\r\n\r\n    const winNumChart = Debounce((idx: number) => {\r\n        if (btnSelect[idx]) return\r\n        if (sortBtn)\r\n            setMainList([...userChartList.sort((a: any, b: any) => a[1] - b[1])])\r\n        else\r\n            setMainList([...userChartList.sort((a: any, b: any) => b[1] - a[1])])\r\n        selected(idx)\r\n    }, 200)\r\n\r\n    //정렬\r\n    const sort = Debounce(() => {\r\n        if (sortBtn) {\r\n            setMainList([...MainList.sort((a: any, b: any) => b[1] - a[1])])\r\n            setSortBtn()\r\n        } else {\r\n            setMainList([...MainList.sort((a: any, b: any) => a[1] - b[1])])\r\n            setSortBtn()\r\n        }\r\n    }, 200)\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <LineDiv content={<FlexDiv><Span>가상 로또</Span><ButtonGroup id={[\"userGraphBtn1\",\"userGraphBtn2\"]} content={[\"당첨 비율\", \"당첨 번호(3등 ↑)\"]} selected={btnSelect} click={[rankChart, winNumChart]}></ButtonGroup><Button border={true} click={sort} hoverBg=\"rgb(224,230,251)\" bg=\"white\" content={<Arrow fill=\"rgb(86,115,235)\" upDown={sortBtn}></Arrow>}></Button></FlexDiv>}></LineDiv>\r\n\r\n            {btnSelect[0] ? <PieChart></PieChart> : <Chart></Chart>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserChart\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\Kakao.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\NaverBlog.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\KakaoStory.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\CopyUrl.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\FaceBook.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Draw.tsx",["231","232"],"import React, { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { Debounce } from '../Debounce'\r\nimport Button from '../components/Button'\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\nimport styled from 'styled-components'\r\nimport NumLineWrap from '../components/NumLineWrap';\r\n//번호 추첨기\r\nconst Div = styled.div`\r\n    border-top : 1px solid rgba(134,134,134,0.19);\r\n    background: rgba(134,134,134,0.07);\r\n    animation: ${props => props.theme.fadeUp} .5s linear alternate;\r\n    margin-bottom : 15px;\r\n    margin-top : 15px;\r\n`\r\nconst SmallSpan = styled.span`\r\n    color : gray;\r\n    font-size : 12px;\r\n`\r\ntype props = {\r\n    list: number[][]\r\n    setDraw: Function\r\n    setCorrect: Function\r\n    correct: boolean[]\r\n    setbonusCorrect: Function\r\n    bonusCorrect: boolean[]\r\n    setTrigger: Function\r\n    trigger: boolean\r\n    mode: boolean\r\n}\r\n\r\nconst Draw = ({ setTrigger, list, setCorrect, correct, setbonusCorrect, bonusCorrect, mode }: props) => {\r\n\r\n    //useSelector로 state에 접근\r\n    // var list = useSelector((state: StoreState) => state.Reducer.list);\r\n    const [result, setResult] = useState<number[]>([]);\r\n    //정답 유무를 구별할 boolean 배열. 동적으로 style component를 변경하려면 props를 state로 관리해야한다. \r\n    // const [correct,setCorrect] = useState<boolean[]>([])\r\n    \r\n    //인터벌 변수\r\n    const interval = useRef<any>();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        //스피드모드 일때 자동으로 추첨 진행\r\n        if (mode) {\r\n            random([])\r\n            stop()\r\n        }\r\n    }, [])\r\n\r\n    //랜덤으로 숫자 돌리기. 50ms마다 text의 숫자를 교체해준다. 이미 뽑힌 숫자는 제외한다.\r\n    const random = (arr: Array<number>) => {\r\n        document.getElementById('startBtn')?.setAttribute(\"disabled\", \"true\");\r\n        var num = document.getElementById(\"num\")\r\n        interval.current = setInterval(() => {\r\n            if (!num) clearInterval(interval.current)\r\n            while (num) {\r\n                let number = Math.floor((Math.random() * 45) + 1)\r\n                if (!arr.includes(number)) {\r\n                    num.innerText = number.toString()\r\n                    break;\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n\r\n    //state가 변경되어 렌더링이 되면 이전에 시작된 interval값을 찾지 못하기 때문에 usecallback으로 함수 재생성을 막아줘야함.\r\n    const stop = Debounce(() => {\r\n        //인터벌 중지\r\n        clearInterval(interval.current)\r\n        //랜덤에서 뽑힌 번호.\r\n        let text:any = document.getElementById('num')?.innerText\r\n        let num = parseInt(text)\r\n        if (num === 0) return\r\n\r\n        //유저가 뽑은 리스트를 순회하면서 맞춘 번호가 있으면 맞춘 번호 correct에 저장\r\n        for (var i = 0; i < list.length; i++) {\r\n            if (list[i].includes(num)) {\r\n                if (result.length !== 6) {\r\n                    correct[num] = true;\r\n                    setCorrect([...correct])\r\n                    break\r\n                }\r\n                else {\r\n                    bonusCorrect[num] = true;\r\n                    setbonusCorrect([...bonusCorrect])\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        // list.forEach(i => {\r\n        //     if (i.includes(num)) {\r\n        //         if (result.length !== 6) {\r\n        //             correct[num] = true;\r\n        //             setCorrect([...correct])\r\n        //             console.log(2)\r\n        //             return\r\n        //         }\r\n        //         else {\r\n        //             bonusCorrect[num] = true;\r\n        //             setbonusCorrect([...bonusCorrect])\r\n        //             console.log(3)\r\n        //             return\r\n        //         }\r\n        //     }\r\n        //     console.log(1)\r\n        // })\r\n\r\n        //뽑힌 번호리스트에 저장\r\n        setResult([...result, num])\r\n\r\n\r\n        //추첨이 다 안끝났으면 600ms후에 다시 랜덤으로 숫자 뽑기 시작. \r\n        //스피드 모드일 때는 유저가 클릭해서 하나씩 뽑지 않고 자동으로 진행하기 때문에 버튼 클릭\r\n        if (result.length < 6)\r\n            setTimeout(() => {\r\n                random([...result, num])\r\n                if (mode)\r\n                    document.getElementById('stopBtn')?.click()\r\n            }, 600);\r\n\r\n        //번호가 다 뽑혔으면 트리거에 true를 줘서 Rank 컴포넌트에서 결과를 계산하게 함.\r\n        else {\r\n            document.getElementById(\"loadingBg\")!.style.display = \"none\";\r\n            document.getElementById('stopBtn')!.setAttribute(\"disabled\", \"true\");\r\n            setTrigger(true)\r\n        }\r\n    }, 700)\r\n\r\n\r\n    //초기화. 인터벌도 중지 시키고 뽑힌 리스트도 초기화.\r\n    const reset = () => {\r\n        clearInterval(interval.current)\r\n        document.getElementById('num')!.innerText = \"0\"\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setResult([])\r\n        setTimeout(() => {\r\n            setTrigger(false)\r\n        }, 200);\r\n\r\n        document.getElementById('stopBtn')!.removeAttribute(\"disabled\")\r\n        document.getElementById('startBtn')!.removeAttribute(\"disabled\")\r\n    }\r\n\r\n    return (\r\n        <Div id=\"drawSec\">\r\n            <h1 id=\"num\" style={{ fontSize: \"30px\" }}>0</h1>\r\n            <div style={{display : mode ? \"none\" : \"block\"}}>\r\n                <Button fontSize=\"1.1em\" id=\"startBtn\" content=\"추첨시작\" click={() => random([])}></Button>\r\n                <Button fontSize=\"1.1em\" id=\"stopBtn\" click={stop} content=\"뽑기\"></Button>\r\n                <Button fontSize=\"1.1em\" id=\"resetBtn\" color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" click={reset} content=\"초기화\"></Button>\r\n            </div>\r\n            <LineDiv fontSize={15} content=\"추첨 결과\"></LineDiv>\r\n            <NumLineWrap idx={0} content={result.length === 0 ? <SmallSpan id=\"beforeDrawNotice\">추첨시작을 누른 후 당첨숫자를 뽑아보세요</SmallSpan> : result.map((x, idx) => {\r\n                if (idx === 6)\r\n                    return (\r\n                        <span key={idx} id=\"bonusSpan\">+  <ResultNum key={idx} bonusCorrect={bonusCorrect[x]} correct={correct[x]} bonus={true} num={x}></ResultNum></span>\r\n                    )\r\n                else\r\n                    return (\r\n                        <ResultNum key={idx} bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x}></ResultNum>\r\n                    )\r\n            })}></NumLineWrap>\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default Draw\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx",["233"],"import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { RankResult } from '../models/RankResult.js'\r\nimport { RankResultNum } from '../models/RankResultNum'\r\nimport Axios from 'axios'\r\n//결과를 출력하는 컴포넌트. 도출부터 전송까지 여기서 다 함.\r\ntype props = {\r\n    trigger?: boolean\r\n    list: number[]\r\n    bonusCorrect: boolean[]\r\n    correct: boolean[]\r\n    listSize: number\r\n    idx: number\r\n    rankResult: any\r\n    rankResultNum: any\r\n    setUserResult: Function\r\n    hide?: boolean\r\n    setRank:Function\r\n}\r\n\r\ntype RankProps = {\r\n    bg: string\r\n    hide?: boolean\r\n}\r\n\r\nconst RankSpan = styled.span<RankProps>`\r\n    background: ${props => props.bg || 'none'};\r\n    border-radius: 5px;\r\n    padding: .3em;\r\n    color: white;\r\n    float : left;\r\n`\r\n\r\nconst Rank:any = ({setRank, rankResultNum, rankResult, hide, list, listSize, idx, correct, bonusCorrect, setUserResult, trigger }: props) => {\r\n    const [rankColor, setRankColor] = useState<string[]>([\"\", \"\"])\r\n    //당첨 결과에 따른 bg를 담을 state\r\n\r\n\r\n    const result = () => {\r\n        //맞은 개수 계산\r\n        var correctList: any = list.map((x, idx) => { if (correct[x]) return idx; else return undefined}).filter((x: any) => x >= 0)\r\n        //이번 회차의 보너스 번호\r\n        var bonusNum: number = bonusCorrect.indexOf(true)\r\n        //보너스 번호를 맞췄는지 검증\r\n        var bonus: boolean = list.includes(bonusNum)\r\n\r\n        \r\n        if (correctList.length < 3) {\r\n            //각 결과마다 +1을 해주는 set 실행\r\n            rankResult.setLast()\r\n            //text와 색깔 리턴\r\n            return [\"꽝\", \"black\"]\r\n        }\r\n        else if (correctList.length === 3) {\r\n            rankResult.setFifth()\r\n            return [\"5등\", \"darkslateblue\"]\r\n        }\r\n        else if (correctList.length === 4) {\r\n            rankResult.setFourth()\r\n            return [\"4등\", \"darkgoldenrod\"]\r\n        }\r\n        else if (correctList.length === 5 && !bonus) {\r\n            let list2: any = [...list]\r\n            correctList.forEach((i: any) => {\r\n                list2[i] = [list2[i], 1]\r\n            })\r\n            rankResult.setThird()\r\n            rankResultNum.setThirdNums(list2)\r\n            return [\"3등\", \"darkcyan\"]\r\n        }\r\n        else if (correctList.length === 5) {\r\n            //3등부터는 결과를 저장할거라서 맞춘 일반번호는 1, 보너스 번호는 2로 배열에 추가한다.\r\n            let list2: any = [...list]\r\n            correctList.forEach((i: any) => {\r\n                list2[i] = [list2[i], 1]\r\n            })\r\n            list2[list.indexOf(bonusNum)] = [list2[list.indexOf(bonusNum)], 2]\r\n            rankResult.setSecond()\r\n            rankResultNum.setSecondNums(list2)\r\n            return [\"2등\", \"cornflowerblue\"]\r\n        }\r\n        else {\r\n            let list2: any = [...list]\r\n            correctList.forEach((i: any) => {\r\n                list2[i] = [list2[i], 1]\r\n            })\r\n            rankResult.setFirst()\r\n            rankResultNum.setFirstNums(list2)\r\n            return [\"1등\", \"coral\"]\r\n        }\r\n    }\r\n\r\n    //db에 저장\r\n    const sendResult = async (sumResult: RankResult, resultNums: RankResultNum) => {\r\n        await Axios.post(`${process.env.REACT_APP_URL}/winData`, { sumResult: sumResult, resultNums: resultNums })\r\n            .then()\r\n            .catch()\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRankColor(result())\r\n        //추첨이 끝나고 마지막에 실행\r\n        if (listSize - 1 === idx) {\r\n            //3등 이상은 이름을 입력받아서 저장\r\n            var rank = rankResult.getFirst > 0 ? 1 : (rankResult.getSecond > 0 ? 2 : (rankResult.getThird > 0 ? 3 : (rankResult.getFourth > 0 ? 4 : 0)))\r\n            if (rank > 0 && rank < 4) {\r\n                setRank(rank)\r\n                // alert(`축하합니다 ${rank}등에 당첨되셨습니다!`)\r\n                // var name:any = window.prompt(`명예의 전당에 올릴 성함(닉네임)을 알려주세요! \\n취소를 누르시면 익명으로 등록됩니다.  ※최대 10글자`) || \"익명\"\r\n                // while (true) {\r\n                //     console.log(name)\r\n                //     if (name.length > 10)\r\n                //         name = window.prompt(\"10글자 이하로 부탁드립니다 취소를 누르시면 익명으로 등록됩니다.\") || \"익명\"\r\n                //     else break;\r\n                // }\r\n                // rankResultNum.setWinnerName(name.trim())\r\n            }\r\n            else{\r\n                sendResult(rankResult, rankResultNum)\r\n            }\r\n            if (rank === 0&&hide) document.getElementById(\"noticeNoWin\")!.innerText = \"4등 이상 당첨된 로또가 없습니다\"\r\n            else if(rank>0&&hide) document.getElementById(\"noticeNoWin\")!.innerText = \"\"\r\n            // sendResult(rankResult, rankResultNum)\r\n\r\n            // //로컬스토리지에 있는 데이터를 가져와서 새 데이터와 합쳐서 다시 저장\r\n            var pastResult = localStorage.getItem(\"userResult\")\r\n            if (pastResult) {\r\n                var newResult = JSON.parse(pastResult);\r\n                newResult.first += rankResult.getFirst\r\n                newResult.second += rankResult.getSecond\r\n                newResult.third += rankResult.getThird\r\n                newResult.fourth += rankResult.getFourth\r\n                newResult.fifth += rankResult.getFifth\r\n                newResult.last += rankResult.getLast \r\n                setUserResult(newResult)\r\n                localStorage.setItem(\"userResult\", JSON.stringify(newResult))\r\n            } else {\r\n                localStorage.setItem(\"userResult\", JSON.stringify(rankResult))\r\n                setUserResult(rankResult)\r\n            }\r\n            //결과 나온 후 로또내역 보여주기 위해 footer up\r\n            var footerBtn: any = document.getElementById(\"footerBtn\")?.firstChild\r\n            if (footerBtn.style.transform.indexOf(\"180\") < 0)\r\n                document.getElementById(\"footerBtn\")?.click()\r\n            \r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        // <RankSpan id={\"rankSpan\" + idx} hide={hide} bg={rankColor[1]}>\r\n        //     {rankColor[0]}\r\n        // </RankSpan>\r\n        hide ? '' : <RankSpan id={\"rankSpan\" + idx} bg={rankColor[1]}>\r\n            {rankColor[0]}\r\n        </RankSpan>\r\n    )\r\n}\r\n\r\nexport default Rank\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineChart.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\FakeLotto.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UpdateInterval.ts",["234","235","236"],"import { useEffect, useRef } from 'react'\r\nimport Axios from 'axios'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/ChartStore';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\n\r\nconst UpdateInterval = () => {\r\n    const roundSize = useSelector((state: StoreState) => state.Reducer.recentRound)\r\n    const select1 = useSelector((state: StoreState) => state.Reducer.roundSelect1)\r\n    const select2 = useSelector((state: StoreState) => state.Reducer.roundSelect2)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setChartList = (value: number[]) => {\r\n        dispatch(actionCreators.chartList(value))\r\n    }\r\n    const setChartBonusList = (value: number[]) => {\r\n        dispatch(actionCreators.chartBonusList(value))\r\n    }\r\n    const setUserSum = (value: any) => {\r\n        dispatch(actionCreators.userChartSum(value))\r\n    }\r\n    const setUserChartList = (value: number[]) => {\r\n        dispatch(actionCreators.userChartList(value))\r\n    }\r\n\r\n    const setRoundSize = (value: number) => {\r\n        dispatch(actionCreators.recentRound(value))\r\n    }\r\n    const setRoundSelect2 = (value: number) => {\r\n        dispatch(actionCreators.roundSelect2(value))\r\n    }\r\n    const setRoundSelect1 = (value: number) => {\r\n        dispatch(actionCreators.roundSelect1(value))\r\n    }\r\n    //최신 회차가 몇인지 가져옴.\r\n    const getSize = async () => {\r\n        await Axios.post(`${process.env.REACT_APP_URL}/`, {\r\n            query: `\r\n        query{\r\n            roundSize\r\n        }\r\n        `}).then(res => {\r\n\r\n                var data = res.data.data.roundSize\r\n                var [big, small] = bigSmall(data - 30, data)\r\n                winGraph(small - 1, big - small + 1, false, false)\r\n                winGraph(small - 1, big - small + 1, true, false)\r\n                getRankData()\r\n                getWinData()\r\n\r\n                setRoundSelect2(data)\r\n                setRoundSize(data)\r\n                setRoundSelect1(data - 30)\r\n                document.getElementById(\"root\")!.style.display = \"block\"\r\n\r\n            })\r\n    }\r\n\r\n    const winGraph = (skip: number, limit: number, bonus: boolean, sort: boolean) => {\r\n        if (roundSize === 0) return\r\n        Axios.post(`${process.env.REACT_APP_URL}/winGraph`, { skip: skip, limit: limit !== 0 ? limit : 1, bonus: bonus, sort: sort })\r\n            .then(res => {\r\n                if (!bonus) {\r\n                    setChartList(res.data)\r\n                }\r\n                else {\r\n                    setChartBonusList(res.data)\r\n                }\r\n            })\r\n    }\r\n\r\n    const getRankData = async () => {\r\n        Axios.post(`${process.env.REACT_APP_URL}/`, {\r\n            query: `\r\n        query{\r\n            resultSum(_id:\"id\"){\r\n                last fifth fourth third second first\r\n            }\r\n        }\r\n        `}).then(res => {\r\n                var data = res.data.data.resultSum\r\n                var list = Object.keys(data).map(i => {\r\n                    switch (i) {\r\n                        case \"first\":\r\n                            return [\"1등\", data[i]]\r\n                        case \"second\":\r\n                            return [\"2등\", data[i]]\r\n                        case \"third\":\r\n                            return [\"3등\", data[i]]\r\n                        case \"fourth\":\r\n                            return [\"4등\", data[i]]\r\n                        case \"fifth\":\r\n                            return [\"5등\", data[i]]\r\n                        case \"last\":\r\n                            return [\"꽝\", data[i]]\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                setUserSum(list)\r\n            })\r\n    }\r\n\r\n    const getWinData = async () => {\r\n        Axios.get(`${process.env.REACT_APP_URL}/userWinNum`).then(res => {\r\n            setUserChartList(res.data)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    //회차 선택을 큰 수, 작은 수 순으로 할 경우를 위해 만든 대소 비교 함수.\r\n    const bigSmall = (val1: number, val2: number) => {\r\n        return val1 > val2 ? [val1, val2] : [val2, val1]\r\n    }\r\n\r\n    useEffect(() => {\r\n        //처음 그래프 정보 로드\r\n        if (roundSize === 0)\r\n            getSize()\r\n    }, [roundSize])\r\n\r\n    const id = useRef<any>()\r\n\r\n    useEffect(() => {\r\n        if (roundSize === 0) return\r\n        if (id) clearInterval(id.current)\r\n        interval() //유저가 회차 셀렉트 시 즉각적으로 정보가져오고 다시 인터벌 시작\r\n        id.current = setInterval(() => {\r\n            interval()\r\n        }, 15000);\r\n    }, [select1, select2])\r\n\r\n    function interval() {\r\n        console.log(\"Data Updated!\")\r\n        var [big, small] = bigSmall(select1, select2)\r\n        winGraph(small - 1, big - small + 1, false, false)\r\n        winGraph(small - 1, big - small + 1, true, false)\r\n        getRankData()\r\n        getWinData()\r\n    }\r\n}\r\n\r\nexport default UpdateInterval\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\ChartStore.ts",["237"],"// types\r\n\r\nimport { RankResult } from \"../models/RankResult\";\r\n\r\n//interface를 통해 타입을 정해준다.\r\nexport interface ChartState {\r\n  chartMainData: any;\r\n  chartList: number[][];\r\n  chartBonusList: number[][];\r\n  userChartSum: any;\r\n  userChartList: number[][];\r\n  graphSize: number;\r\n  recentRound: number;\r\n  roundSelect1: number\r\n  roundSelect2: number\r\n  sortBtn: boolean;\r\n}\r\n\r\n//액션 타입\r\nexport const CHARTMAINDATA = \"CHARTMAINDATA\";\r\nexport const CHARTLIST = \"CHARTLIST\";\r\nexport const CHARTBONUSLIST = \"CHARTBONUSLIST\";\r\nexport const USERCHARTSUM = \"USERCHARTSUM\";\r\nexport const USERCHARTLIST = \"USERCHARTLIST\";\r\nexport const GRAPHSIZE = \"GRAPHSIZE\";\r\nexport const RECENTROUND = \"RECENTROUND\";\r\nexport const ROUNDSELECT1 = \"ROUNDSELECT1\"\r\nexport const ROUNDSELECT2 = \"ROUNDSELECT2\"\r\nexport const SORTBTN = \"SORTBTN\"\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\n\r\ninterface chartMainDataAction {\r\n  newList: number[][];\r\n  type: typeof CHARTMAINDATA;\r\n}\r\ninterface chartListAction {\r\n  newList: number[][];\r\n  type: typeof CHARTLIST;\r\n}\r\ninterface chartListWithBonusAction {\r\n  newList: number[][];\r\n  type: typeof CHARTBONUSLIST;\r\n}\r\ninterface userChartSumAction {\r\n  newData: any;\r\n  type: typeof USERCHARTSUM;\r\n}\r\ninterface userChartListAction {\r\n  newList: number[][];\r\n  type: typeof USERCHARTLIST;\r\n}\r\ninterface GraphSize {\r\n  size: number;\r\n  type: typeof GRAPHSIZE;\r\n}\r\n\r\ninterface RecentRound {\r\n  value: number;\r\n  type: typeof RECENTROUND;\r\n}\r\ninterface SortBtn {\r\n  value: boolean;\r\n  type: typeof SORTBTN;\r\n}\r\n\r\n\r\ninterface RoundSelect1 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT1;\r\n}\r\ninterface RoundSelect2 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT2;\r\n}\r\n\r\n\r\ntype ActionTypes =\r\n  chartMainDataAction |\r\n  chartListAction |\r\n  chartListWithBonusAction |\r\n  userChartSumAction |\r\n  userChartListAction |\r\n  GraphSize |\r\n  RecentRound |\r\n  RoundSelect1 |\r\n  RoundSelect2 | \r\n  SortBtn\r\n// interface ActionTypes {\r\n//   actionTypes : ListAction | List2Action\r\n// }\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction chartMainData(newList: number[]) {\r\n  return {\r\n    type: CHARTMAINDATA,\r\n    newList: newList\r\n  };\r\n}\r\nfunction chartList(newList: number[]) {\r\n  return {\r\n    type: CHARTLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction chartBonusList(newList: number[]) {\r\n  return {\r\n    type: CHARTBONUSLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction userChartList(newList: number[]) {\r\n  return {\r\n    type: USERCHARTLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction graphSizeUp(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction userChartSum(newData: any) {\r\n  return {\r\n    type: USERCHARTSUM,\r\n    newData: newData\r\n  };\r\n}\r\nfunction graphSizeDown(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\n\r\nfunction recentRound(value: number) {\r\n  return {\r\n    type: RECENTROUND,\r\n    value: value\r\n  };\r\n}\r\n\r\nfunction roundSelect1(value: number) {\r\n  return {\r\n    type: ROUNDSELECT1,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect2(value: number) {\r\n  return {\r\n    type: ROUNDSELECT2,\r\n    value: value\r\n  };\r\n}\r\nfunction sortBtn() {\r\n  return {\r\n    type: SORTBTN\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  chartMainData, chartList, chartBonusList, userChartSum, userChartList, graphSizeUp, graphSizeDown, recentRound, roundSelect1, roundSelect2, sortBtn\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: ChartState = {\r\n  chartMainData: [[]],\r\n  chartList: [],\r\n  chartBonusList: [],\r\n  userChartSum: [],\r\n  userChartList: [],\r\n  graphSize: 1160,\r\n  recentRound: 0,\r\n  roundSelect1: 1,\r\n  roundSelect2: 1,\r\n  sortBtn: false\r\n};\r\n\r\n// reducers\r\nexport function ChartReducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): ChartState {\r\n  switch (action.type) {\r\n    case CHARTMAINDATA:\r\n      return {\r\n        ...state,\r\n        chartMainData: action.newList\r\n      };\r\n    case CHARTLIST:\r\n      return {\r\n        ...state,\r\n        chartList: action.newList\r\n      };\r\n    case CHARTBONUSLIST:\r\n      return {\r\n        ...state,\r\n        chartBonusList: action.newList\r\n      };\r\n    case USERCHARTSUM:\r\n      return {\r\n        ...state,\r\n        userChartSum: action.newData\r\n      };\r\n    case USERCHARTLIST:\r\n      return {\r\n        ...state,\r\n        userChartList: action.newList\r\n      };\r\n    case GRAPHSIZE:\r\n      return {\r\n        ...state,\r\n        graphSize: action.size\r\n      };\r\n\r\n    case RECENTROUND:\r\n      return {\r\n        ...state,\r\n        recentRound: action.value\r\n      };\r\n\r\n    case ROUNDSELECT1:\r\n      return {\r\n        ...state,\r\n        roundSelect1: action.value\r\n      };\r\n    case ROUNDSELECT2:\r\n      return {\r\n        ...state,\r\n        roundSelect2: action.value\r\n      };\r\n      case SORTBTN:\r\n        return {\r\n          ...state,\r\n          sortBtn: state.sortBtn ? false : true\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Throttle.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\InsertHOF.tsx",["238"],"import { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from './Button'\r\n//명예의전당 등록 모달\r\nconst Modal = styled.div`\r\n    width : 300px;\r\n    background : white;\r\n    box-shadow: rgba(0,0,0,0.28) -1px 1px 20px;\r\n    position: absolute;\r\n    z-index: 998;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    height: 148px;\r\n    border-radius : 10px;\r\n    @media(max-width : 400px){\r\n        width : 80%;\r\n        height : 120px;\r\n    }\r\n`\r\nconst Title = styled.h3`\r\n    color : rgb(86,115,235);\r\n    font-weight: 600;\r\n    margin-bottom : 10px;\r\n`\r\nconst Content = styled.span`\r\n    color : gray;\r\n    font-size : .8em;\r\n`\r\nconst Input = styled.input`\r\n    margin-right : 5px;\r\n    outline : 0;\r\n    border : 0;\r\n    background : rgb(224,230,251);\r\n    font-size : .9em;\r\n    border-bottom : 2px solid rgb(86,115,235);\r\n    width : 70%;\r\n\r\n`\r\n\r\nconst Div = styled.div`\r\n    display : flex;\r\n`\r\n\r\ntype props ={\r\n    sendResult:Function\r\n    handleChange:any\r\n    rank:number\r\n}\r\nconst InsertHOF = ({rank,sendResult,handleChange}:props) => {\r\n    useEffect(() => {\r\n            document.getElementById(\"nameInput\")?.focus()\r\n    }, [])\r\n    const keyEvent = (e:any) => {\r\n        if(e.keyCode===13) sendResult()\r\n    }\r\n    return (\r\n        <Modal>\r\n            <Title>축하합니다!</Title>\r\n            <Content>{rank}등에 당첨되셨습니다. </Content><br></br>\r\n            <Content>명예의 전당에 등록할 닉네임을 입력해주세요.</Content>\r\n            <Input id=\"nameInput\" placeholder=\"2~15글자\" onChange={handleChange} onKeyUp={keyEvent}/>\r\n            <Button bg=\"rgb(224,230,251)\" color=\"rgb(86,115,235)\" content=\"제출\" click={sendResult}></Button>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default InsertHOF\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LottoLogo.tsx",[],{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","severity":1,"message":"244","line":9,"column":9,"nodeType":"245","messageId":"246","endLine":9,"endColumn":18},{"ruleId":"247","severity":1,"message":"248","line":137,"column":10,"nodeType":"245","messageId":"249","endLine":137,"endColumn":22},{"ruleId":"243","severity":1,"message":"250","line":26,"column":11,"nodeType":"245","messageId":"246","endLine":26,"endColumn":23},{"ruleId":"243","severity":1,"message":"251","line":29,"column":11,"nodeType":"245","messageId":"246","endLine":29,"endColumn":26},{"ruleId":"243","severity":1,"message":"252","line":32,"column":11,"nodeType":"245","messageId":"246","endLine":32,"endColumn":26},{"ruleId":"243","severity":1,"message":"253","line":26,"column":11,"nodeType":"245","messageId":"246","endLine":26,"endColumn":19},{"ruleId":"254","severity":1,"message":"255","line":83,"column":8,"nodeType":"256","endLine":83,"endColumn":10,"suggestions":"257"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"254","severity":1,"message":"258","line":58,"column":8,"nodeType":"256","endLine":58,"endColumn":10,"suggestions":"259"},{"ruleId":"243","severity":1,"message":"250","line":62,"column":11,"nodeType":"245","messageId":"246","endLine":62,"endColumn":23},{"ruleId":"254","severity":1,"message":"260","line":92,"column":8,"nodeType":"256","endLine":92,"endColumn":19,"suggestions":"261"},{"ruleId":"243","severity":1,"message":"262","line":2,"column":8,"nodeType":"245","messageId":"246","endLine":2,"endColumn":13},{"ruleId":"243","severity":1,"message":"263","line":9,"column":10,"nodeType":"245","messageId":"246","endLine":9,"endColumn":20},{"ruleId":"254","severity":1,"message":"264","line":81,"column":8,"nodeType":"256","endLine":81,"endColumn":22,"suggestions":"265"},{"ruleId":"243","severity":1,"message":"266","line":1,"column":27,"nodeType":"245","messageId":"246","endLine":1,"endColumn":38},{"ruleId":"254","severity":1,"message":"267","line":51,"column":8,"nodeType":"256","endLine":51,"endColumn":10,"suggestions":"268"},{"ruleId":"254","severity":1,"message":"269","line":148,"column":8,"nodeType":"256","endLine":148,"endColumn":10,"suggestions":"270"},{"ruleId":"271","severity":1,"message":"272","line":84,"column":52,"nodeType":"273","messageId":"274","endLine":84,"endColumn":54},{"ruleId":"254","severity":1,"message":"275","line":123,"column":8,"nodeType":"256","endLine":123,"endColumn":19,"suggestions":"276"},{"ruleId":"254","severity":1,"message":"277","line":134,"column":8,"nodeType":"256","endLine":134,"endColumn":26,"suggestions":"278"},{"ruleId":"243","severity":1,"message":"263","line":3,"column":10,"nodeType":"245","messageId":"246","endLine":3,"endColumn":20},{"ruleId":"243","severity":1,"message":"279","line":40,"column":7,"nodeType":"245","messageId":"246","endLine":40,"endColumn":10},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'bonusCorrect' is already defined.","redeclared","'setRoundSize' is assigned a value but never used.","'setRoundSelect2' is assigned a value but never used.","'setRoundSelect1' is assigned a value but never used.","'addAList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWinData'. Either include it or remove the dependency array.","ArrayExpression",["282"],"React Hook useEffect has a missing dependency: 'setUserResult'. Either include it or remove the dependency array. If 'setUserResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["283"],"React Hook useEffect has missing dependencies: 'btnSelect', 'chartBonusList', 'setMainList', and 'sortBtn'. Either include them or remove the dependency array.",["284"],"'Axios' is defined but never used.","'RankResult' is defined but never used.","React Hook useEffect has missing dependencies: 'btnSelect', 'setMainList', 'sortBtn', and 'userChartList'. Either include them or remove the dependency array.",["285"],"'useCallback' is defined but never used.","React Hook useEffect has missing dependencies: 'mode' and 'stop'. Either include them or remove the dependency array.",["286"],"React Hook useEffect has missing dependencies: 'hide', 'idx', 'listSize', 'rankResult', 'rankResultNum', 'result', 'setRank', and 'setUserResult'. Either include them or remove the dependency array. If 'setRank' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["287"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getSize'. Either include it or remove the dependency array.",["288"],"React Hook useEffect has missing dependencies: 'interval' and 'roundSize'. Either include them or remove the dependency array.",["289"],"'Div' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},"Update the dependencies array to be: [getWinData]",{"range":"306","text":"307"},"Update the dependencies array to be: [setUserResult]",{"range":"308","text":"309"},"Update the dependencies array to be: [btnSelect, chartBonusList, chartList, setMainList, sortBtn]",{"range":"310","text":"311"},"Update the dependencies array to be: [btnSelect, setMainList, sortBtn, userChartList, userChartSum]",{"range":"312","text":"313"},"Update the dependencies array to be: [mode, stop]",{"range":"314","text":"315"},"Update the dependencies array to be: [hide, idx, listSize, rankResult, rankResultNum, result, setRank, setUserResult]",{"range":"316","text":"317"},"Update the dependencies array to be: [getSize, roundSize]",{"range":"318","text":"319"},"Update the dependencies array to be: [interval, roundSize, select1, select2]",{"range":"320","text":"321"},[2371,2373],"[getWinData]",[1809,1811],"[setUserResult]",[3066,3077],"[btnSelect, chartBonusList, chartList, setMainList, sortBtn]",[2638,2652],"[btnSelect, setMainList, sortBtn, userChartList, userChartSum]",[1530,1532],"[mode, stop]",[5585,5587],"[hide, idx, listSize, rankResult, rankResultNum, result, setRank, setUserResult]",[4196,4207],"[getSize, roundSize]",[4498,4516],"[interval, roundSize, select1, select2]"]