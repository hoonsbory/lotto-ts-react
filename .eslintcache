[{"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx":"1","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts":"2","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts":"3","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts":"4","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts":"5","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx":"6","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts":"7","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Footer.tsx":"8","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\SearchLotto.tsx":"9","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\ChartSelect.tsx":"10","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Loading.tsx":"11","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\HallOfFame.tsx":"12","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\UserResult.tsx":"13","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SnsGroup.js":"14","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js":"15","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts":"16","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx":"17","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx":"18","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx":"19","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LoadingSvg.tsx":"20","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx":"21","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx":"22","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx":"23","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NotSpeedMode.tsx":"24","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SpeedMode.tsx":"25","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx":"26","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx":"27","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.js":"28","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\Kakao.tsx":"29","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\NaverBlog.tsx":"30","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\KakaoStory.tsx":"31","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\CopyUrl.tsx":"32","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\FaceBook.tsx":"33","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts":"34","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts":"35","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx":"36","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Draw.tsx":"37","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx":"38","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx":"39","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx":"40","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx":"41","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx":"42","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx":"43","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineChart.js":"44","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\FakeLotto.tsx":"45","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UpdateInterval.ts":"46","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\ChartStore.ts":"47","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Throttle.ts":"48","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\InsertHOF.tsx":"49"},{"size":1138,"mtime":1609736466681,"results":"50","hashOfConfig":"51"},{"size":425,"mtime":1608424066436,"results":"52","hashOfConfig":"51"},{"size":648,"mtime":1609909291869,"results":"53","hashOfConfig":"51"},{"size":680,"mtime":1609841526463,"results":"54","hashOfConfig":"51"},{"size":316,"mtime":1610012266712,"results":"55","hashOfConfig":"51"},{"size":1170,"mtime":1610092617990,"results":"56","hashOfConfig":"51"},{"size":5291,"mtime":1609916006303,"results":"57","hashOfConfig":"51"},{"size":946,"mtime":1610033372485,"results":"58","hashOfConfig":"51"},{"size":3570,"mtime":1610018886214,"results":"59","hashOfConfig":"51"},{"size":3625,"mtime":1610091218402,"results":"60","hashOfConfig":"51"},{"size":849,"mtime":1609903065409,"results":"61","hashOfConfig":"51"},{"size":5169,"mtime":1610092629309,"results":"62","hashOfConfig":"51"},{"size":4944,"mtime":1610067530523,"results":"63","hashOfConfig":"51"},{"size":4744,"mtime":1610066688955,"results":"64","hashOfConfig":"51"},{"size":948,"mtime":1609915174483,"results":"65","hashOfConfig":"51"},{"size":894,"mtime":1608892886260,"results":"66","hashOfConfig":"51"},{"size":1155,"mtime":1609911715261,"results":"67","hashOfConfig":"51"},{"size":1204,"mtime":1609906127322,"results":"68","hashOfConfig":"51"},{"size":2725,"mtime":1610091218414,"results":"69","hashOfConfig":"51"},{"size":3486,"mtime":1610031441243,"results":"70","hashOfConfig":"51"},{"size":449,"mtime":1609915393542,"results":"71","hashOfConfig":"51"},{"size":586,"mtime":1609903065409,"results":"72","hashOfConfig":"51"},{"size":1190,"mtime":1610067537706,"results":"73","hashOfConfig":"51"},{"size":11025,"mtime":1610035008634,"results":"74","hashOfConfig":"51"},{"size":8303,"mtime":1610095732697,"results":"75","hashOfConfig":"51"},{"size":6453,"mtime":1610096480603,"results":"76","hashOfConfig":"51"},{"size":4889,"mtime":1610093945968,"results":"77","hashOfConfig":"51"},{"size":4873,"mtime":1610096161549,"results":"78","hashOfConfig":"51"},{"size":1516,"mtime":1609834470317,"results":"79","hashOfConfig":"51"},{"size":2349,"mtime":1609834477653,"results":"80","hashOfConfig":"51"},{"size":576,"mtime":1609834473966,"results":"81","hashOfConfig":"51"},{"size":2066,"mtime":1609834454911,"results":"82","hashOfConfig":"51"},{"size":567,"mtime":1609834464326,"results":"83","hashOfConfig":"51"},{"size":1048,"mtime":1609896832788,"results":"84","hashOfConfig":"51"},{"size":1199,"mtime":1609597407856,"results":"85","hashOfConfig":"51"},{"size":1499,"mtime":1609834560787,"results":"86","hashOfConfig":"51"},{"size":6710,"mtime":1610076557716,"results":"87","hashOfConfig":"51"},{"size":794,"mtime":1609906234168,"results":"88","hashOfConfig":"51"},{"size":1301,"mtime":1609908377917,"results":"89","hashOfConfig":"51"},{"size":830,"mtime":1609914410016,"results":"90","hashOfConfig":"51"},{"size":1394,"mtime":1609914442224,"results":"91","hashOfConfig":"51"},{"size":6695,"mtime":1610093920144,"results":"92","hashOfConfig":"51"},{"size":606,"mtime":1609514815835,"results":"93","hashOfConfig":"51"},{"size":11638,"mtime":1610075728525,"results":"94","hashOfConfig":"51"},{"size":3797,"mtime":1610091270592,"results":"95","hashOfConfig":"51"},{"size":4998,"mtime":1610096907759,"results":"96","hashOfConfig":"51"},{"size":5079,"mtime":1610024301046,"results":"97","hashOfConfig":"51"},{"size":303,"mtime":1610028975300,"results":"98","hashOfConfig":"51"},{"size":1717,"mtime":1610094988377,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1w0125e",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\index.tsx",[],["205","206"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\reportWebVitals.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\global.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\theme.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\index.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\App.tsx",["207"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\store.ts",["208"],"// types\r\n\r\n//interface를 통해 타입을 정해준다.\r\nexport interface State {\r\n  list: number[][];\r\n  accumulateList: number[][];\r\n  graphSize: number;\r\n  drawCheck: boolean;\r\n  corrected: boolean[];\r\n  bonusCorrect: boolean[];\r\n  recentRound: number;\r\n  resultTrigger: boolean;\r\n  roundSelect1: number\r\n  roundSelect2: number\r\n  userResult: any\r\n}\r\n\r\n//액션 타입\r\nexport const LIST = \"LIST\";\r\nexport const ALIST = \"ALIST\";\r\nexport const RESIZE = \"RESIZE\";\r\nexport const GRAPHSIZE = \"GRAPHSIZE\";\r\nexport const DRAWCHECK = \"DRAWCHECK\";\r\nexport const CORRECTED = \"CORRECTED\";\r\nexport const BONUSCORRECT = \"BONUSCORRECT\";\r\nexport const RECENTROUND = \"RECENTROUND\";\r\nexport const TRIGGER = \"TRIGGER\";\r\nexport const ROUNDSELECT1 = \"ROUNDSELECT1\"\r\nexport const ROUNDSELECT2 = \"ROUNDSELECT2\"\r\nexport const USERRESULT = \"USERRESULT\"\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\ninterface ListAction {\r\n  newList: number[][];\r\n  type: typeof LIST;\r\n}\r\n\r\ninterface AccumulateListAction {\r\n  newList: number[][];\r\n  type: typeof ALIST;\r\n}\r\n\r\ninterface GraphSize {\r\n  size: number;\r\n  type: typeof GRAPHSIZE;\r\n}\r\ninterface DrawCheck {\r\n  value: boolean;\r\n  type: typeof DRAWCHECK;\r\n}\r\ninterface Corrected {\r\n  value: boolean[];\r\n  type: typeof CORRECTED;\r\n}\r\ninterface bonusCorrect {\r\n  value: boolean[];\r\n  type: typeof BONUSCORRECT;\r\n}\r\ninterface RecentRound {\r\n  value: number;\r\n  type: typeof RECENTROUND;\r\n}\r\n\r\ninterface ResultTrigger {\r\n  value: boolean;\r\n  type: typeof TRIGGER;\r\n}\r\ninterface RoundSelect1 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT1;\r\n}\r\ninterface RoundSelect2 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT2;\r\n}\r\ninterface UserResult {\r\n  value: any;\r\n  type: typeof USERRESULT;\r\n}\r\n\r\ntype ActionTypes = ListAction |\r\n  AccumulateListAction |\r\n  GraphSize |\r\n  DrawCheck | Corrected |\r\n  RecentRound |\r\n  ResultTrigger |\r\n  bonusCorrect |\r\n  RoundSelect1 |\r\n  RoundSelect2 | \r\n  UserResult\r\n// interface ActionTypes {\r\n//   actionTypes : ListAction | List2Action\r\n// }\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction list(newList: number[][]) {\r\n  return {\r\n    type: LIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction accumulateList(newList: number[]) {\r\n  return {\r\n    type: ALIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction graphSizeUp(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction graphSizeDown(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction drawCheck(value: boolean) {\r\n  return {\r\n    type: DRAWCHECK,\r\n    value: value\r\n  };\r\n}\r\nfunction corrected(value: boolean[]) {\r\n  return {\r\n    type: CORRECTED,\r\n    value: value\r\n  };\r\n}\r\nfunction bonusCorrect(value: boolean[]) {\r\n  return {\r\n    type: BONUSCORRECT,\r\n    value: value\r\n  };\r\n}\r\nfunction recentRound(value: number) {\r\n  return {\r\n    type: RECENTROUND,\r\n    value: value\r\n  };\r\n}\r\nfunction resultTrigger(value: boolean) {\r\n  return {\r\n    type: TRIGGER,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect1(value: number) {\r\n  return {\r\n    type: ROUNDSELECT1,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect2(value: number) {\r\n  return {\r\n    type: ROUNDSELECT2,\r\n    value: value\r\n  };\r\n}\r\nfunction userResult(value: any) {\r\n  return {\r\n    type: USERRESULT,\r\n    value: value\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  list, accumulateList, graphSizeUp, graphSizeDown, drawCheck, corrected, recentRound, resultTrigger, bonusCorrect, roundSelect1, roundSelect2, userResult\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: State = {\r\n  list: [[]],\r\n  accumulateList: [],\r\n  graphSize: 1160,\r\n  drawCheck: false,\r\n  corrected: [],\r\n  bonusCorrect: [],\r\n  recentRound: 0,\r\n  resultTrigger: false,\r\n  roundSelect1: 1,\r\n  roundSelect2: 1,\r\n  userResult: {\r\n    first : 0,\r\n    second : 0,\r\n    third : 0,\r\n    fourth : 0,\r\n    fifth : 0,\r\n    last : 0\r\n  }\r\n};\r\n\r\n// reducers\r\nexport function Reducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): State {\r\n  switch (action.type) {\r\n    case LIST:\r\n      return {\r\n        ...state,\r\n        list: action.newList\r\n      };\r\n    case ALIST:\r\n      return {\r\n        ...state,\r\n        accumulateList: action.newList\r\n      };\r\n    case GRAPHSIZE:\r\n      return {\r\n        ...state,\r\n        graphSize: action.size\r\n      };\r\n    case DRAWCHECK:\r\n      return {\r\n        ...state,\r\n        drawCheck: action.value\r\n      };\r\n    case CORRECTED:\r\n      return {\r\n        ...state,\r\n        corrected: action.value\r\n      };\r\n    case BONUSCORRECT:\r\n      return {\r\n        ...state,\r\n        bonusCorrect: action.value\r\n      };\r\n    case RECENTROUND:\r\n      return {\r\n        ...state,\r\n        recentRound: action.value\r\n      };\r\n    case TRIGGER:\r\n      return {\r\n        ...state,\r\n        resultTrigger: action.value\r\n      };\r\n    case ROUNDSELECT1:\r\n      return {\r\n        ...state,\r\n        roundSelect1: action.value\r\n      };\r\n    case ROUNDSELECT2:\r\n      return {\r\n        ...state,\r\n        roundSelect2: action.value\r\n      };\r\n      case USERRESULT:\r\n      return {\r\n        ...state,\r\n        userResult: action.value\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Footer.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\SearchLotto.tsx",["209","210","211"],"import { useEffect , useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { actionCreators } from '../store/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport LineDiv from '../components/LineDiv'\r\nimport Axios from 'axios'\r\nimport ResultNum from '../components/ResultNum';\r\nimport styled from 'styled-components'\r\n//가장 상단에 위치한 섹션\r\n//처음에 로드되기때문에 로또의 회차 수를 가져오고 가장 최신회차의 번호를 출력한다.\r\nconst Div = styled.div`\r\n    margin-bottom : 30px;\r\n`\r\n\r\nconst SearchLotto = () => {\r\n    const [select,setSelect] = useState<number>(0)\r\n    const [numList,setNumList] = useState<number[]>([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setRoundSize = (value:number) => {\r\n        dispatch(actionCreators.recentRound(value))\r\n    }\r\n    const setRoundSelect2 = (value:number) => {\r\n        dispatch(actionCreators.roundSelect2(value))\r\n    }\r\n    const setRoundSelect1 = (value:number) => {\r\n        dispatch(actionCreators.roundSelect1(value))\r\n    }\r\n\r\n    //회차\r\n    var roundSize = useSelector((state:StoreState)=> state.Reducer.recentRound)\r\n\r\n    //최신 회차가 몇인지 가져옴.\r\n    // const getSize = async () => {\r\n    //     await Axios.post(`${process.env.REACT_APP_URL}/`, {query : `\r\n    //     query{\r\n    //         roundSize\r\n    //     }\r\n    //     `}).then(res => {\r\n    //         var data = res.data.data.roundSize\r\n    //         setSelect(data)\r\n    //         setRoundSelect2(data)\r\n    //         setRoundSelect1(data-30)\r\n    //         setRoundSize(data)\r\n    //         document.getElementById(\"root\")!.style.display = \"block\"\r\n    //         getNum(data)\r\n\r\n    //     })\r\n    // }\r\n\r\n    //선택한 회차 정보를 가져옴\r\n    const getNum = async (num : number) => {\r\n        await Axios.post(`${process.env.REACT_APP_URL}/`, {query : `\r\n            query{\r\n                winningNum(_id: ${num}){\r\n                    num1 num2 num3 num4 num5 num6 bonus\r\n                }\r\n            }\r\n        `}).then(res=> {\r\n            var obj = res.data.data.winningNum\r\n            var list = []\r\n            for(var data in obj){\r\n                list.push(obj[data])\r\n            }\r\n            setNumList([...list])\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        //회차정보는 하단에 차트에서도 쓰이기때문에 처음에 가져와서 state로 관리한다.\r\n        if(roundSize>0){\r\n            setSelect(roundSize)\r\n            getNum(roundSize)\r\n        }\r\n    }, [roundSize])\r\n\r\n    //select 옵션 최신회차까지 생성\r\n    var arr = new Array(roundSize).fill(0)\r\n    var map = arr.map((x, idx: number) => <option key={idx} value={idx + 1}>{idx + 1}</option>)\r\n\r\n\r\n    //select onChange\r\n    const handleChange = (e:any) => {\r\n        setSelect(e.target.value)\r\n        getNum(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Div>\r\n            <LineDiv fontSize={15} content={<div>지난 로또 조회  <select value={select} onChange={handleChange}>{map}</select>회차</div>}></LineDiv>\r\n            <p>{numList.map((x, idx) => {\r\n                if (idx === 6)\r\n                    return (\r\n                        <span key={idx}>+  <ResultNum key={idx} bonus={true} num={x}></ResultNum></span>\r\n                    )\r\n                else\r\n                    return (\r\n                        <ResultNum key={idx} num={x}></ResultNum>\r\n                    )\r\n            })}</p>\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default SearchLotto\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\ChartSelect.tsx",["212"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Loading.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\HallOfFame.tsx",["213"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\UserResult.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SnsGroup.js",[],["214","215"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\RollingNum.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Debounce.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineDiv.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ResultNum.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\ButtonGroup.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LoadingSvg.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SubTitle.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NobodyWin.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SlideFooterBtn.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NotSpeedMode.tsx",["216","217"],"\r\nimport React, { useState, useEffect , useRef} from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '../components/Button';\r\nimport { List } from 'react-virtualized';\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\n\r\nimport Draw from '../sections/Draw';\r\nimport NumList from '../components/NumList';\r\nimport NumLineWrap from '../components/NumLineWrap';\r\nimport Rank from '../components/Rank';\r\nimport DeleteSvg from '../components/DeleteSvg';\r\nimport { RankResultNum } from '../models/RankResultNum';\r\nimport { RankResult } from '../models/RankResult';\r\n\r\n//번호 리스트 스크롤 \r\nconst ScrollList = styled.div`\r\n    overflow-y : auto;\r\n    max-height : ${window.innerHeight / 2}px;\r\n`\r\nconst ListIdxSpan = styled.span`\r\n    float : left;\r\n    margin-left : 10px;\r\n    font-weight : 600;\r\n    font-size : .9em;\r\n    margin-top : 4px;\r\n`\r\n\r\nconst SmallSpan = styled.span`\r\n    color : gray;\r\n    font-size : 12px;\r\n    display : flex;\r\n    flex-direction : column-reverse;\r\n`\r\ntype props = {\r\n    list: number[][]\r\n    draw: boolean\r\n    correct: boolean[]\r\n    bonusCorrect: boolean[]\r\n    trigger: boolean\r\n    setList: Function\r\n    setDraw: Function\r\n    setCorrect: Function\r\n    setbonusCorrect: Function\r\n    setTrigger: Function\r\n    setUserResult: Function\r\n}\r\n\r\nconst NotSpeedMode = ({ list, draw, correct, bonusCorrect, trigger, setList, setUserResult, setDraw, setTrigger, setCorrect, setbonusCorrect }: props) => {\r\n    //번호 선택 배열. 당첨번호 선택번호 등 state로 관리하는 이유는 스타일 컴포넌트의 props 변경을 위해서다.\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([])\r\n\r\n    useEffect(() => {\r\n        //로컬스토리지에 있는 유저의 로또 내역 state에 저장\r\n        var result = localStorage.getItem(\"userResult\")\r\n        if (result) setUserResult(JSON.parse(result))\r\n    }, [])\r\n    //번호 선택 이벤트\r\n    const select = (num: number) => {\r\n        if (limit()) return\r\n        if (list[list.length - 1].includes(num)) {\r\n            //번호 선택 해제. 배열에서 제거하고 스타일 변경을 위해 false로 변경.\r\n            list[list.length - 1].splice(list[list.length - 1].indexOf(num), 1)\r\n            selectBtn[num - 1] = false\r\n            setSelectBtn([...selectBtn])\r\n            setList([...list])\r\n        }\r\n        else if (list[list.length - 1].length === 6) return\r\n        else {\r\n            selectBtn[num - 1] = true\r\n            setSelectBtn([...selectBtn])\r\n            list[list.length - 1].push(num)\r\n            setList([...list])\r\n        }\r\n    }\r\n\r\n\r\n    //로또 번호 버튼배열 생성\r\n    let allNum: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]\r\n    let map = allNum.map((x, idx) => <NumList key={idx} content={x} selected={selectBtn[idx]} id={`btn${x}`} click={select}></NumList>)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //전체 상태 초기화\r\n    const reset = () => {\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setTrigger(false)\r\n        setDraw(false)\r\n        setSelectBtn([])\r\n        setList([[]])\r\n    }\r\n\r\n    //번호 확정 시 추첨기 ON\r\n    const submit = () => {\r\n        if (list[list.length - 1].length < 6) {\r\n            alert(\"총 6개의 번호를 선택해주세요\")\r\n            return\r\n        }\r\n        if (window.confirm(`선택한 로또번호로 추첨하시겠습니까?`)) {\r\n            setDraw(true)\r\n        }\r\n    }\r\n\r\n    //추첨 후에 버튼 조작 못하게\r\n    const afterDraw = () => {\r\n        if (document.getElementById('resetBtn')&&!document.getElementById(\"beforeDrawNotice\")) {\r\n            if (window.confirm(\"추첨이 시작된 로또이므로 번호를 추가할 수 없습니다. 초기화하시겠습니까?\")) {\r\n                reset()\r\n                return true\r\n            }\r\n            else return true\r\n        }\r\n        else return false\r\n    }\r\n\r\n    //최대 100장까지 구매제한\r\n    const limit = () => {\r\n        if (afterDraw()) return true\r\n        var count: any = document.getElementById(\"lottoList\")?.childElementCount\r\n        if (count > 100) {\r\n            alert(\"1회 10만원까지만 제공됩니다.\")\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    //랜덤뽑기. 번호 선택 6개까지 남은 n개의 수를 랜덤으로 클릭. true를 파라미터로 10회 뽑기 여부 판단\r\n    const random = (tenReps: boolean) => {\r\n        if (limit()) return\r\n        var length: number = list[list.length - 1].length\r\n        for (var i = 0; i < 6 - length; i++) {\r\n            while (true) {\r\n                var num: number = Math.floor((Math.random() * 45) + 1)\r\n                if (!list[list.length - 1].includes(num)) {\r\n                    document.getElementById(`btn${num}`)?.click()\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //랜덤 10회 뽑기 최대 100회까지 제한.\r\n        if (tenReps) {\r\n            var count: any = document.getElementById(\"lottoList\")?.childElementCount\r\n            if (count > 99) {\r\n                alert(\"1회 10만원까지만 제공됩니다.\")\r\n                return\r\n            }\r\n            document.getElementById(\"loadingBg\")!.style.display = \"block\";\r\n            if (count + 10 > 100)\r\n                random11(100)\r\n            else\r\n                random11(count < 10 ? count + 9 : count + 10)\r\n        }\r\n    }\r\n\r\n    const random11 = (count: number) => {\r\n        if (document.getElementById(\"lottoList\")?.childElementCount === count) {\r\n            document.getElementById(\"loadingBg\")!.style.display = \"none\";\r\n            return\r\n        }\r\n        document.getElementById(\"lineAdd\")?.click()\r\n        setTimeout(() => {\r\n            document.getElementById(`randomBtn`)?.click()\r\n            random11(count)\r\n        }, 1);\r\n\r\n    }\r\n\r\n\r\n\r\n    //로또 한줄 추가\r\n    const addLine = () => {\r\n        if (list[list.length - 1].length < 6) return\r\n        if (limit()) return\r\n        list.push([])\r\n        setList([...list])\r\n        setSelectBtn([])\r\n        var node: any = document.getElementById(\"lottoList\")\r\n        setTimeout(() => {\r\n            node.scrollTo(0, node.clientHeight + 10000)\r\n        }, 10);\r\n    }\r\n\r\n    //한줄 초기화. 줄 자체를 제거하지는 않고 선택번호만 초기화\r\n    const resetOneLine = () => {\r\n        list[list.length - 1] = []\r\n        setSelectBtn([])\r\n        setList([...list])\r\n    }\r\n\r\n    //줄 삭제\r\n    const deleteSelectLine = (idx: number) => {\r\n        if (list.length === idx + 1) setSelectBtn([])\r\n        deleteLine(idx)\r\n    }\r\n\r\n    const deleteLine = (idx: number) => {\r\n        list.splice(idx, 1)\r\n        setList([...list])\r\n    }\r\n\r\n\r\n    //react virtualized \r\n    const rowRenderer = (\r\n        () => {\r\n            return (\r\n                <ScrollList id=\"lottoList\">\r\n                    {list.map((i, idx) => <NumLineWrap key={idx} idx={idx} content={list[idx].length === 0 ?\r\n                        (list.length > 1 ? //2개이상부터는 삭제가능하게 Btn추가\r\n                            <SmallSpan>새 번호를 선택해주세요\r\n                             <Button\r\n                                    hoverBg=\"#EAEAEA\"\r\n                                    bg=\"none\"\r\n                                    content={<DeleteSvg />}\r\n                                    click={() => deleteSelectLine(idx)} />\r\n                            </SmallSpan>\r\n                            : <SmallSpan >새 번호를 선택해주세요</SmallSpan>)\r\n\r\n                        : <span>{trigger ? //추첨 끝나면 Rank계산\r\n                            <Rank\r\n                                setUserResult={setUserResult}\r\n                                rankResultNum={rankResultNum}\r\n                                rankResult={rankResult}\r\n                                listSize={list.length}\r\n                                idx={idx}\r\n                                list={list[idx]}\r\n                                correct={correct}\r\n                                bonusCorrect={bonusCorrect}\r\n                                trigger={trigger} /> : ''}\r\n\r\n                            <ListIdxSpan>{idx + 1}번</ListIdxSpan>\r\n                            {list[idx].sort((a, b) => a - b).map((x, idx2) =>\r\n                                //번호 6개\r\n                                <ResultNum key={idx2} bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x} />)}\r\n\r\n                            {idx > 0 ?\r\n                                <Button float=\"right\" hoverBg=\"#EAEAEA\" bg=\"none\" content={<DeleteSvg />} click={() => deleteSelectLine(idx)} />\r\n                                : ''}</span>} />)}\r\n                </ScrollList>\r\n            );\r\n        })\r\n\r\n    //계산에 쓰일 클래스 private\r\n    var rankResult = new RankResult()\r\n    var rankResultNum = new RankResultNum()\r\n    return (\r\n        <div>\r\n            {map}\r\n            <div>\r\n            <Button id=\"randomBtn\" fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"나머지 랜덤\" click={() => random(false)} />\r\n            <Button id=\"lineAdd\" fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"한 줄 추가\" click={addLine} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"현재 줄 초기화\" click={resetOneLine} />\r\n            </div>\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(235, 83, 116)\" bg=\"rgba(235, 83, 116, 0.12)\" hoverBg=\"rgb(235, 83, 116)\" content=\"전체초기화\" click={reset} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(255,94,0)\" bg=\"rgba(255,94,0,.12)\" hoverBg=\"rgb(255,94,0)\" content=\"만원 어치\" click={() => random(true)} />\r\n            <Button fontSize={\"1.0em\"} color=\"rgb(255,94,0)\" bg=\"rgba(255,94,0,.12)\" hoverBg=\"rgb(255,94,0)\" content=\"추첨하기\" click={submit} />\r\n            {draw ? <Draw mode={false} bonusCorrect={bonusCorrect} setbonusCorrect={setbonusCorrect} trigger={trigger} setTrigger={setTrigger} list={list} setDraw={setDraw} setCorrect={setCorrect} correct={correct} /> : ''}\r\n            <LineDiv fontSize={15} content=\"내가 뽑은 로또 번호\" />\r\n            <List\r\n                width={1}\r\n                height={1}\r\n                overscanRowsCount={1}\r\n                rowCount={1}\r\n                rowHeight={40}\r\n                rowRenderer={rowRenderer}\r\n                containerStyle={{\r\n                    width: \"100%\",\r\n                    maxWidth: \"100%\",\r\n                    height: \"100%\",\r\n                    maxHeight: \"100%\"\r\n                }}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\"\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotSpeedMode","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\SpeedMode.tsx",["218","219"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\AccumulateChart.tsx",["220","221"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UserChart.tsx",["222","223","224"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Chart.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\Kakao.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\NaverBlog.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\KakaoStory.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\CopyUrl.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\SnsIcon\\FaceBook.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResultNum.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\models\\RankResult.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Button.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\Draw.tsx",["225","226"],"import React, { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { Debounce } from '../Debounce'\r\nimport Button from '../components/Button'\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\nimport styled from 'styled-components'\r\nimport NumLineWrap from '../components/NumLineWrap';\r\n//번호 추첨기\r\nconst Div = styled.div`\r\n    border-top : 1px solid rgba(134,134,134,0.19);\r\n    background: rgba(134,134,134,0.07);\r\n    animation: ${props => props.theme.fadeUp} .5s linear alternate;\r\n    margin-bottom : 15px;\r\n    margin-top : 15px;\r\n`\r\nconst SmallSpan = styled.span`\r\n    color : gray;\r\n    font-size : 12px;\r\n`\r\ntype props = {\r\n    list: number[][]\r\n    setDraw: Function\r\n    setCorrect: Function\r\n    correct: boolean[]\r\n    setbonusCorrect: Function\r\n    bonusCorrect: boolean[]\r\n    setTrigger: Function\r\n    trigger: boolean\r\n    mode: boolean\r\n}\r\n\r\nconst Draw = ({ setTrigger, list, setCorrect, correct, setbonusCorrect, bonusCorrect, mode }: props) => {\r\n\r\n    //useSelector로 state에 접근\r\n    // var list = useSelector((state: StoreState) => state.Reducer.list);\r\n    const [result, setResult] = useState<number[]>([]);\r\n    //정답 유무를 구별할 boolean 배열. 동적으로 style component를 변경하려면 props를 state로 관리해야한다. \r\n    // const [correct,setCorrect] = useState<boolean[]>([])\r\n    \r\n    //인터벌 변수\r\n    const interval = useRef<any>();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        //스피드모드 일때 자동으로 추첨 진행\r\n        if (mode) {\r\n            random([])\r\n            stop()\r\n        }\r\n    }, [])\r\n\r\n    //랜덤으로 숫자 돌리기. 50ms마다 text의 숫자를 교체해준다. 이미 뽑힌 숫자는 제외한다.\r\n    const random = (arr: Array<number>) => {\r\n        document.getElementById('startBtn')?.setAttribute(\"disabled\", \"true\");\r\n        var num = document.getElementById(\"num\")\r\n        interval.current = setInterval(() => {\r\n            if (!num) clearInterval(interval.current)\r\n            while (num) {\r\n                let number = Math.floor((Math.random() * 45) + 1)\r\n                if (!arr.includes(number)) {\r\n                    num.innerText = number.toString()\r\n                    break;\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n\r\n    //state가 변경되어 렌더링이 되면 이전에 시작된 interval값을 찾지 못하기 때문에 usecallback으로 함수 재생성을 막아줘야함.\r\n    const stop = Debounce(() => {\r\n        //인터벌 중지\r\n        clearInterval(interval.current)\r\n        //랜덤에서 뽑힌 번호.\r\n        let text:any = document.getElementById('num')?.innerText\r\n        let num = parseInt(text)\r\n        if (num === 0) return\r\n\r\n        //유저가 뽑은 리스트를 순회하면서 맞춘 번호가 있으면 맞춘 번호 correct에 저장\r\n        for (var i = 0; i < list.length; i++) {\r\n            if (list[i].includes(num)) {\r\n                if (result.length !== 6) {\r\n                    correct[num] = true;\r\n                    setCorrect([...correct])\r\n                    break\r\n                }\r\n                else {\r\n                    bonusCorrect[num] = true;\r\n                    setbonusCorrect([...bonusCorrect])\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        // list.forEach(i => {\r\n        //     if (i.includes(num)) {\r\n        //         if (result.length !== 6) {\r\n        //             correct[num] = true;\r\n        //             setCorrect([...correct])\r\n        //             console.log(2)\r\n        //             return\r\n        //         }\r\n        //         else {\r\n        //             bonusCorrect[num] = true;\r\n        //             setbonusCorrect([...bonusCorrect])\r\n        //             console.log(3)\r\n        //             return\r\n        //         }\r\n        //     }\r\n        //     console.log(1)\r\n        // })\r\n\r\n        //뽑힌 번호리스트에 저장\r\n        setResult([...result, num])\r\n\r\n\r\n        //추첨이 다 안끝났으면 600ms후에 다시 랜덤으로 숫자 뽑기 시작. \r\n        //스피드 모드일 때는 유저가 클릭해서 하나씩 뽑지 않고 자동으로 진행하기 때문에 버튼 클릭\r\n        if (result.length < 6)\r\n            setTimeout(() => {\r\n                random([...result, num])\r\n                if (mode)\r\n                    document.getElementById('stopBtn')?.click()\r\n            }, 600);\r\n\r\n        //번호가 다 뽑혔으면 트리거에 true를 줘서 Rank 컴포넌트에서 결과를 계산하게 함.\r\n        else {\r\n            document.getElementById(\"loadingBg\")!.style.display = \"none\";\r\n            document.getElementById('stopBtn')!.setAttribute(\"disabled\", \"true\");\r\n            setTrigger(true)\r\n        }\r\n    }, 700)\r\n\r\n\r\n    //초기화. 인터벌도 중지 시키고 뽑힌 리스트도 초기화.\r\n    const reset = () => {\r\n        clearInterval(interval.current)\r\n        document.getElementById('num')!.innerText = \"0\"\r\n        setCorrect([])\r\n        setbonusCorrect([])\r\n        setResult([])\r\n        setTimeout(() => {\r\n            setTrigger(false)\r\n        }, 200);\r\n\r\n        document.getElementById('stopBtn')!.removeAttribute(\"disabled\")\r\n        document.getElementById('startBtn')!.removeAttribute(\"disabled\")\r\n    }\r\n\r\n    return (\r\n        <Div id=\"drawSec\">\r\n            <h1 id=\"num\" style={{ fontSize: \"30px\" }}>0</h1>\r\n            <div style={{display : mode ? \"none\" : \"block\"}}>\r\n                <Button fontSize=\"1.1em\" id=\"startBtn\" content=\"추첨시작\" click={() => random([])}></Button>\r\n                <Button fontSize=\"1.1em\" id=\"stopBtn\" click={stop} content=\"뽑기\"></Button>\r\n                <Button fontSize=\"1.1em\" id=\"resetBtn\" color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" click={reset} content=\"초기화\"></Button>\r\n            </div>\r\n            <LineDiv fontSize={15} content=\"추첨 결과\"></LineDiv>\r\n            <NumLineWrap idx={0} content={result.length === 0 ? <SmallSpan id=\"beforeDrawNotice\">추첨시작을 누른 후 당첨숫자를 뽑아보세요</SmallSpan> : result.map((x, idx) => {\r\n                if (idx === 6)\r\n                    return (\r\n                        <span key={idx} id=\"bonusSpan\">+  <ResultNum key={idx} bonusCorrect={bonusCorrect[x]} correct={correct[x]} bonus={true} num={x}></ResultNum></span>\r\n                    )\r\n                else\r\n                    return (\r\n                        <ResultNum key={idx} bonusCorrect={bonusCorrect[x]} correct={correct[x]} num={x}></ResultNum>\r\n                    )\r\n            })}></NumLineWrap>\r\n        </Div>\r\n    )\r\n}\r\n\r\nexport default Draw\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DeleteSvg.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\DoubleArrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumLineWrap.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\NumList.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Rank.tsx",["227"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\Arrow.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\LineChart.js",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\sections\\FakeLotto.tsx",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\UpdateInterval.ts",["228","229","230","231"],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\store\\ChartStore.ts",["232"],"// types\r\n\r\nimport { RankResult } from \"../models/RankResult\";\r\n\r\n//interface를 통해 타입을 정해준다.\r\nexport interface ChartState {\r\n  chartMainData: any;\r\n  chartList: number[][];\r\n  chartBonusList: number[][];\r\n  userChartSum: any;\r\n  userChartList: number[][];\r\n  graphSize: number;\r\n  recentRound: number;\r\n  roundSelect1: number\r\n  roundSelect2: number\r\n  sortBtn: boolean;\r\n}\r\n\r\n//액션 타입\r\nexport const CHARTMAINDATA = \"CHARTMAINDATA\";\r\nexport const CHARTLIST = \"CHARTLIST\";\r\nexport const CHARTBONUSLIST = \"CHARTBONUSLIST\";\r\nexport const USERCHARTSUM = \"USERCHARTSUM\";\r\nexport const USERCHARTLIST = \"USERCHARTLIST\";\r\nexport const GRAPHSIZE = \"GRAPHSIZE\";\r\nexport const RECENTROUND = \"RECENTROUND\";\r\nexport const ROUNDSELECT1 = \"ROUNDSELECT1\"\r\nexport const ROUNDSELECT2 = \"ROUNDSELECT2\"\r\nexport const SORTBTN = \"SORTBTN\"\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\n\r\ninterface chartMainDataAction {\r\n  newList: number[][];\r\n  type: typeof CHARTMAINDATA;\r\n}\r\ninterface chartListAction {\r\n  newList: number[][];\r\n  type: typeof CHARTLIST;\r\n}\r\ninterface chartListWithBonusAction {\r\n  newList: number[][];\r\n  type: typeof CHARTBONUSLIST;\r\n}\r\ninterface userChartSumAction {\r\n  newData: any;\r\n  type: typeof USERCHARTSUM;\r\n}\r\ninterface userChartListAction {\r\n  newList: number[][];\r\n  type: typeof USERCHARTLIST;\r\n}\r\ninterface GraphSize {\r\n  size: number;\r\n  type: typeof GRAPHSIZE;\r\n}\r\n\r\ninterface RecentRound {\r\n  value: number;\r\n  type: typeof RECENTROUND;\r\n}\r\ninterface SortBtn {\r\n  value: boolean;\r\n  type: typeof SORTBTN;\r\n}\r\n\r\n\r\ninterface RoundSelect1 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT1;\r\n}\r\ninterface RoundSelect2 {\r\n  value: number;\r\n  type: typeof ROUNDSELECT2;\r\n}\r\n\r\n\r\ntype ActionTypes =\r\n  chartMainDataAction |\r\n  chartListAction |\r\n  chartListWithBonusAction |\r\n  userChartSumAction |\r\n  userChartListAction |\r\n  GraphSize |\r\n  RecentRound |\r\n  RoundSelect1 |\r\n  RoundSelect2 | \r\n  SortBtn\r\n// interface ActionTypes {\r\n//   actionTypes : ListAction | List2Action\r\n// }\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction chartMainData(newList: number[]) {\r\n  return {\r\n    type: CHARTMAINDATA,\r\n    newList: newList\r\n  };\r\n}\r\nfunction chartList(newList: number[]) {\r\n  return {\r\n    type: CHARTLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction chartBonusList(newList: number[]) {\r\n  return {\r\n    type: CHARTBONUSLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction userChartList(newList: number[]) {\r\n  return {\r\n    type: USERCHARTLIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction graphSizeUp(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\nfunction userChartSum(newData: any) {\r\n  return {\r\n    type: USERCHARTSUM,\r\n    newData: newData\r\n  };\r\n}\r\nfunction graphSizeDown(size: number) {\r\n  return {\r\n    type: GRAPHSIZE,\r\n    size: size\r\n  };\r\n}\r\n\r\nfunction recentRound(value: number) {\r\n  return {\r\n    type: RECENTROUND,\r\n    value: value\r\n  };\r\n}\r\n\r\nfunction roundSelect1(value: number) {\r\n  return {\r\n    type: ROUNDSELECT1,\r\n    value: value\r\n  };\r\n}\r\nfunction roundSelect2(value: number) {\r\n  return {\r\n    type: ROUNDSELECT2,\r\n    value: value\r\n  };\r\n}\r\nfunction sortBtn() {\r\n  return {\r\n    type: SORTBTN\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  chartMainData, chartList, chartBonusList, userChartSum, userChartList, graphSizeUp, graphSizeDown, recentRound, roundSelect1, roundSelect2, sortBtn\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: ChartState = {\r\n  chartMainData: [[]],\r\n  chartList: [],\r\n  chartBonusList: [],\r\n  userChartSum: [],\r\n  userChartList: [],\r\n  graphSize: 1160,\r\n  recentRound: 0,\r\n  roundSelect1: 1,\r\n  roundSelect2: 1,\r\n  sortBtn: false\r\n};\r\n\r\n// reducers\r\nexport function ChartReducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): ChartState {\r\n  switch (action.type) {\r\n    case CHARTMAINDATA:\r\n      return {\r\n        ...state,\r\n        chartMainData: action.newList\r\n      };\r\n    case CHARTLIST:\r\n      return {\r\n        ...state,\r\n        chartList: action.newList\r\n      };\r\n    case CHARTBONUSLIST:\r\n      return {\r\n        ...state,\r\n        chartBonusList: action.newList\r\n      };\r\n    case USERCHARTSUM:\r\n      return {\r\n        ...state,\r\n        userChartSum: action.newData\r\n      };\r\n    case USERCHARTLIST:\r\n      return {\r\n        ...state,\r\n        userChartList: action.newList\r\n      };\r\n    case GRAPHSIZE:\r\n      return {\r\n        ...state,\r\n        graphSize: action.size\r\n      };\r\n\r\n    case RECENTROUND:\r\n      return {\r\n        ...state,\r\n        recentRound: action.value\r\n      };\r\n\r\n    case ROUNDSELECT1:\r\n      return {\r\n        ...state,\r\n        roundSelect1: action.value\r\n      };\r\n    case ROUNDSELECT2:\r\n      return {\r\n        ...state,\r\n        roundSelect2: action.value\r\n      };\r\n      case SORTBTN:\r\n        return {\r\n          ...state,\r\n          sortBtn: state.sortBtn ? false : true\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\Throttle.ts",[],"C:\\Users\\JAEHOON\\OneDrive\\바탕 화면\\프로젝트\\ts-app\\src\\components\\InsertHOF.tsx",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":9,"column":9,"nodeType":"239","messageId":"240","endLine":9,"endColumn":18},{"ruleId":"241","severity":1,"message":"242","line":137,"column":10,"nodeType":"239","messageId":"243","endLine":137,"endColumn":22},{"ruleId":"237","severity":1,"message":"244","line":22,"column":11,"nodeType":"239","messageId":"240","endLine":22,"endColumn":23},{"ruleId":"237","severity":1,"message":"245","line":25,"column":11,"nodeType":"239","messageId":"240","endLine":25,"endColumn":26},{"ruleId":"237","severity":1,"message":"246","line":28,"column":11,"nodeType":"239","messageId":"240","endLine":28,"endColumn":26},{"ruleId":"237","severity":1,"message":"247","line":26,"column":11,"nodeType":"239","messageId":"240","endLine":26,"endColumn":19},{"ruleId":"248","severity":1,"message":"249","line":81,"column":8,"nodeType":"250","endLine":81,"endColumn":10,"suggestions":"251"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"252","line":2,"column":39,"nodeType":"239","messageId":"240","endLine":2,"endColumn":45},{"ruleId":"248","severity":1,"message":"253","line":58,"column":8,"nodeType":"250","endLine":58,"endColumn":10,"suggestions":"254"},{"ruleId":"237","severity":1,"message":"255","line":45,"column":12,"nodeType":"239","messageId":"240","endLine":45,"endColumn":21},{"ruleId":"237","severity":1,"message":"256","line":45,"column":23,"nodeType":"239","messageId":"240","endLine":45,"endColumn":31},{"ruleId":"237","severity":1,"message":"244","line":56,"column":11,"nodeType":"239","messageId":"240","endLine":56,"endColumn":23},{"ruleId":"248","severity":1,"message":"257","line":86,"column":8,"nodeType":"250","endLine":86,"endColumn":19,"suggestions":"258"},{"ruleId":"237","severity":1,"message":"259","line":2,"column":8,"nodeType":"239","messageId":"240","endLine":2,"endColumn":13},{"ruleId":"237","severity":1,"message":"260","line":9,"column":10,"nodeType":"239","messageId":"240","endLine":9,"endColumn":20},{"ruleId":"248","severity":1,"message":"261","line":81,"column":8,"nodeType":"250","endLine":81,"endColumn":22,"suggestions":"262"},{"ruleId":"237","severity":1,"message":"263","line":1,"column":27,"nodeType":"239","messageId":"240","endLine":1,"endColumn":38},{"ruleId":"248","severity":1,"message":"264","line":51,"column":8,"nodeType":"250","endLine":51,"endColumn":10,"suggestions":"265"},{"ruleId":"248","severity":1,"message":"266","line":148,"column":8,"nodeType":"250","endLine":148,"endColumn":10,"suggestions":"267"},{"ruleId":"237","severity":1,"message":"260","line":7,"column":10,"nodeType":"239","messageId":"240","endLine":7,"endColumn":20},{"ruleId":"268","severity":1,"message":"269","line":78,"column":52,"nodeType":"270","messageId":"271","endLine":78,"endColumn":54},{"ruleId":"248","severity":1,"message":"272","line":123,"column":8,"nodeType":"250","endLine":123,"endColumn":19,"suggestions":"273"},{"ruleId":"248","severity":1,"message":"274","line":134,"column":8,"nodeType":"250","endLine":134,"endColumn":25,"suggestions":"275"},{"ruleId":"237","severity":1,"message":"260","line":3,"column":10,"nodeType":"239","messageId":"240","endLine":3,"endColumn":20},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'bonusCorrect' is already defined.","redeclared","'setRoundSize' is assigned a value but never used.","'setRoundSelect2' is assigned a value but never used.","'setRoundSelect1' is assigned a value but never used.","'addAList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWinData'. Either include it or remove the dependency array.","ArrayExpression",["278"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'setUserResult'. Either include it or remove the dependency array. If 'setUserResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"'nameCheck' is assigned a value but never used.","'setCheck' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MainList', 'btnSelect', 'chartBonusList', 'setMainList', and 'sortBtn'. Either include them or remove the dependency array.",["280"],"'Axios' is defined but never used.","'RankResult' is defined but never used.","React Hook useEffect has missing dependencies: 'MainList', 'btnSelect', 'setMainList', 'sortBtn', and 'userChartList'. Either include them or remove the dependency array.",["281"],"'useCallback' is defined but never used.","React Hook useEffect has missing dependencies: 'mode' and 'stop'. Either include them or remove the dependency array.",["282"],"React Hook useEffect has missing dependencies: 'hide', 'idx', 'listSize', 'rankResult', 'rankResultNum', 'result', and 'setRank'. Either include them or remove the dependency array. If 'setRank' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["283"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'getRankData', 'getSize', 'getWinData', 'select1', 'select2', and 'winGraph'. Either include them or remove the dependency array.",["284"],"React Hook useEffect has missing dependencies: 'interval' and 'roundSize'. Either include them or remove the dependency array.",["285"],"no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [getWinData]",{"range":"302","text":"303"},"Update the dependencies array to be: [setUserResult]",{"range":"304","text":"305"},"Update the dependencies array to be: [MainList, btnSelect, chartBonusList, chartList, setMainList, sortBtn]",{"range":"306","text":"307"},"Update the dependencies array to be: [MainList, btnSelect, setMainList, sortBtn, userChartList, userChartSum]",{"range":"308","text":"309"},"Update the dependencies array to be: [mode, stop]",{"range":"310","text":"311"},"Update the dependencies array to be: [hide, idx, listSize, rankResult, rankResultNum, result, setRank]",{"range":"312","text":"313"},"Update the dependencies array to be: [getRankData, getSize, getWinData, roundSize, select1, select2, winGraph]",{"range":"314","text":"315"},"Update the dependencies array to be: [interval, roundSize, select1, select2]",{"range":"316","text":"317"},[2326,2328],"[getWinData]",[1809,1811],"[setUserResult]",[3188,3199],"[MainList, btnSelect, chartBonusList, chartList, setMainList, sortBtn]",[2882,2896],"[MainList, btnSelect, setMainList, sortBtn, userChartList, userChartSum]",[1530,1532],"[mode, stop]",[5812,5814],"[hide, idx, listSize, rankResult, rankResultNum, result, setRank]",[4229,4240],"[getRankData, getSize, getWinData, roundSize, select1, select2, winGraph]",[4527,4544],"[interval, roundSize, select1, select2]"]