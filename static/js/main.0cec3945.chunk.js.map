{"version":3,"sources":["components/Button.tsx","components/ResultNum.tsx","components/LineDiv.tsx","pages/Draw.tsx","Debounce.ts","pages/SelectNum.tsx","store/store.ts","App.tsx","reportWebVitals.ts","store/index.ts","theme.ts","global.ts","index.tsx"],"names":["Btn","styled","button","props","bg","color","sessionStorage","getItem","Button","content","click","id","onClick","NumSpan","span","theme","fadeUp","corrected","ResultNum","num","correct","Div","div","fontSize","LineDiv","Draw","list","useSelector","state","Reducer","useState","result","setResult","setCorrect","random","useCallback","arr","document","getElementById","setAttribute","setInterval","clearInterval","number","Math","floor","includes","innerText","toString","stop","func","timeout","timer","args","clearTimeout","setTimeout","Debounce","parseInt","length","alert","filter","x","reset","removeAttribute","map","sort","a","b","selected","NumDiv","SelectNum","addList","history","useHistory","selectBtn","setSelectBtn","numList","setNumList","idx","splice","indexOf","push","select","window","confirm","LIST","LIST2","actionCreators","newList","type","list2","initialState","RootDiv","HeadLine","h2","pcCheck","navigator","userAgent","setItem","App","dispatch","useDispatch","basename","process","className","exact","path","render","component","TsTest","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","keyframes","flexDiv","css","GlobalStyle","createGlobalStyle","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","ReactDOM"],"mappings":"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","file":"static/js/main.0cec3945.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n//기본 버튼.\r\ninterface btnProps {\r\n    color?: string\r\n    bg? : string\r\n}\r\ntype btnStyle = {\r\n    color?: string;\r\n    bg?: string;\r\n    content: string;\r\n    click?: any;\r\n    id?: string;\r\n}\r\nconst Btn = styled.button<btnProps>`\r\n        border : 0;\r\n        outline : 0;\r\n        cursor : pointer;\r\n        transition:all ease-out .5s;\r\n        padding : 5px 10px;\r\n        margin-bottom : 5px;\r\n        margin-right : 5px;\r\n        background : ${props => props.bg || \"#EAEAEA\"};\r\n        color : ${props => props.color || \"unset\"};\r\n        border-radius : 10px;\r\n        font-weight : 600;\r\n        ${sessionStorage.getItem(\"mobile\")===\"true\" ? '&:active{background : rgb(70, 77, 82); color : white;}': '&:hover{background : rgb(70, 77, 82); color : white;}'}\r\n    `\r\nconst Button = ({color,bg,content,click,id}:btnStyle) => {\r\n    return (\r\n        <Btn color={color} bg={bg} onClick={click} id={id}> \r\n            {content}\r\n        </Btn>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import styled from 'styled-components'\r\n\r\n//내가 뽑은 혹은 추첨한 로또 번호 리스트로 뿌려줄 span\r\ninterface spanProps{\r\n    //맞춘 번호는 색다르게.\r\n    corrected?: boolean\r\n}\r\n\r\ntype resultProps = {\r\n    num : number\r\n    correct? : boolean\r\n}\r\n\r\nconst NumSpan = styled.span<spanProps>`\r\n    animation: ${props=> props.theme.fadeUp} .5s linear alternate;\r\n    display : inline-block;\r\n    width : 30px;\r\n    border : 1px solid rgba(86, 115, 235, 0.19);\r\n    padding : 5px 0px;\r\n    margin-bottom : 5px;\r\n    margin-right : 5px;\r\n    background : ${props => props.corrected ? \"rgba(235, 83, 116,.12)\" : \"white\"};\r\n    color : ${props => props.corrected ? \"rgb(235, 83, 116)\" : \"rgb(70, 77, 82)\"};\r\n    border-radius : 50px;\r\n    font-weight : 600;\r\n`\r\n\r\nconst ResultNum = ({num,correct}:resultProps) => {\r\n    return (\r\n        <NumSpan corrected={correct}>\r\n            {num}\r\n        </NumSpan>\r\n    )\r\n}\r\n\r\nexport default ResultNum\r\n","import styled from 'styled-components'\r\n//양옆에 라인이 있는 div 커스터마이징 할 수 있게 props 설정해줌\r\ninterface styleProps {\r\n    color? : string;\r\n    fontSize? : number;\r\n}\r\ntype props = {\r\n    color? : string;\r\n    fontSize? : number;\r\n    content : string;\r\n}\r\n\r\n\r\nconst Div = styled.div<styleProps>`\r\n    margin-top : 10px;\r\n    margin-bottom : 5px;\r\n    color : ${props => props.color || 'unset'};\r\n    font-size : ${props => props.fontSize || 'unset'};\r\n    font-weight : 600;\r\n    display: flex;\r\n    align-items: center;\r\n    &:before{\r\n        content: \"\";\r\n        margin-right : 8px;\r\n        flex: 0%;\r\n        height: 1px;\r\n        background: rgba(134, 134, 134, 0.19);\r\n        z-index: -100;\r\n    }\r\n    &:after{\r\n        content: \"\";\r\n        margin-left : 8px;\r\n        flex: 0%;\r\n        height: 1px;\r\n        background: rgba(134, 134, 134, 0.19);\r\n        z-index: -100;\r\n    }\r\n`\r\n\r\nconst LineDiv = ({color,content,fontSize}:props) => {\r\n    return (\r\n        <Div color={color} fontSize={fontSize}>\r\n            {content}\r\n        </Div>\r\n    )\r\n}\r\nexport default LineDiv\r\n\r\n","import React ,{ useState,  useCallback } from 'react'\r\nimport { Debounce } from '../Debounce'\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport Button from '../components/Button'\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\n\r\n\r\n\r\nconst Draw = () => {\r\n    \r\n    //useSelector로 state에 접근\r\n    var list = useSelector((state: StoreState) => state.Reducer.list);\r\n    const [result, setResult] = useState<number[]>([]);\r\n    //정답 유무를 구별할 boolean 배열. 동적으로 style component를 변경하려면 props를 state로 관리해야한다. \r\n    const [correct,setCorrect] = useState<boolean[]>([])\r\n\r\n    let id: NodeJS.Timeout;\r\n    \r\n   \r\n\r\n    const random = useCallback((arr: Array<number>) => {\r\n        document.getElementById('startBtn')?.setAttribute(\"disabled\",\"true\");\r\n        var num = document.getElementById(\"num\")\r\n        id = setInterval(() => {\r\n            if(!num) clearInterval(id)\r\n            while (num) {\r\n                let number = Math.floor((Math.random() * 45) + 1)\r\n                if (!arr.includes(number)) {\r\n                     num.innerText = number.toString()\r\n                    break;\r\n                }\r\n            }\r\n        }, 50);\r\n    },[])\r\n\r\n    //state가 변경되어 렌더링이 되면 이전에 시작된 interval값을 찾지 못하기 때문에 usecallback으로 함수 재생성을 막아줘야함.\r\n    const stop = Debounce(useCallback((correct:Array<boolean>, result :Array<number>,list:Array<number>) => {\r\n\r\n        let num = parseInt(document.getElementById('num')!.innerText)\r\n        if(num===0) return\r\n        clearInterval(id)\r\n        if(list.includes(num)) {\r\n            correct[num] = true;\r\n            setCorrect([...correct])\r\n        }\r\n        setResult([...result, num])\r\n\r\n        if(result.length<5)\r\n        setTimeout(() => {\r\n            random([...result,num])\r\n        }, 700);\r\n\r\n        else  {\r\n            document.getElementById('stopBtn')!.setAttribute(\"disabled\",\"true\");\r\n            setTimeout(() => {\r\n                alert(`${correct.filter(x=>x).length}개 맞추셨습니다!`)\r\n            }, 500);\r\n        }\r\n    }, []),700)\r\n\r\n    const reset = useCallback(() => {\r\n        clearInterval(id)\r\n        document.getElementById('num')!.innerText = \"0\"\r\n\r\n        setResult([])\r\n        setCorrect([])\r\n        document.getElementById('stopBtn')!.removeAttribute(\"disabled\")\r\n        document.getElementById('startBtn')!.removeAttribute(\"disabled\")\r\n    },[])\r\n \r\n    return (\r\n        <div>\r\n            <h1 id=\"num\">0</h1>\r\n            <Button id=\"startBtn\" content=\"추첨시작\" click={()=> random([])}></Button>\r\n            <Button id=\"stopBtn\" click={() => stop(correct,result,list)} content=\"뽑기\"></Button>\r\n            <Button id=\"resetBtn\" color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" click={reset} content=\"초기화\"></Button>\r\n            <LineDiv content=\"추첨 결과\"></LineDiv>\r\n            <p>{result.map(x => <ResultNum correct={correct[x]} num={x}></ResultNum>)}</p>\r\n            <LineDiv content=\"내가 고른 숫자\"></LineDiv>\r\n            <p>{list.sort((a,b)=> a-b).map(x => <ResultNum correct={correct[x]} num={x}></ResultNum>)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Draw\r\n","// export function Debounce<Params extends any[]>(callback: (...args: Params) => any, milliseconds: number) {\r\n//     let debounceChek: NodeJS.Timeout\r\n//     return function (...args: Params) {\r\n//         // clearTimeout을 settimeout전에 걸어줘서 아무리 많이 버튼을 눌러도 \r\n//         //그 전 setTimeout들은 전부 삭제되고 마지막 setTimeout만 실행된다.\r\n//         clearTimeout(debounceChek);\r\n//         debounceChek = setTimeout(() => {\r\n//         console.log(debounceChek)\r\n//             callback(...args);\r\n//         }, milliseconds);\r\n//     }\r\n// }\r\nexport function Debounce<Params extends any[]>(\r\n    func: (...args: Params) => any,\r\n    timeout: number\r\n  ): (...args: Params) => void {\r\n    let timer: NodeJS.Timeout;\r\n    return (...args: Params) => {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        func(...args);\r\n      }, timeout);\r\n    }\r\n  }","import { useSelector } from 'react-redux';\r\nimport { StoreState } from '../store'\r\nimport React, { useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport Button from '../components/Button';\r\nimport { useHistory } from 'react-router-dom'\r\nimport ResultNum from '../components/ResultNum';\r\nimport LineDiv from '../components/LineDiv';\r\n\r\n//ts에서 props를 사용하는 방법\r\ntype props = {\r\n    addList: Function\r\n}\r\ninterface numSpanProps {\r\n    selected?: boolean\r\n}\r\n\r\n//이런 식으로 자주 쓰일 것 같은 css를 만들어놓고 편리하게 사용 가능.\r\n// const hoverForPC = css`\r\n//     &:hover{\r\n//         background : rgb(70, 77, 82);\r\n//         color : white;\r\n//     }\r\n// `\r\nconst NumSpan = styled.button<numSpanProps>`\r\n        width : 35px;\r\n        outline : 0;\r\n        cursor : pointer;\r\n        border : 0;\r\n        transition:all ease-out .5s;\r\n        padding : 5px 0px;\r\n        margin-bottom : 5px;\r\n        margin-right : 5px;\r\n        background : ${props => props.selected ? \"rgb(70, 77, 82)\" : \"#EAEAEA\"};\r\n        color : ${props => props.selected ? \"white\" : \"unset\"};\r\n        border-radius : 10px;\r\n        font-weight : 600;\r\n        ${sessionStorage.getItem(\"mobile\")===\"true\" ? '': '&:hover{font-size : 16px}'}\r\n    `\r\n    //모바일 환경에서 hover는 사용자에게 혼란을 일으킬 수 있기 때문에 PC에만 hover.\r\n\r\nconst NumDiv = styled.div`\r\n        max-width : 360px;\r\n    `\r\n\r\nconst SelectNum = ({ addList }: props) => {\r\n\r\n    const history = useHistory()\r\n\r\n    const [selectBtn, setSelectBtn] = useState<boolean[]>([])\r\n    const [numList,setNumList] = useState<number[]>([])\r\n\r\n    let allNum: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]\r\n\r\n    //번호 선택 이벤트\r\n    const select = (num: number) => {\r\n        if (numList.includes(num)) {\r\n            //번호 선택 해제. 배열에서 제거하고 스타일 변경을 위해 false로 변경.\r\n            numList.splice(numList.indexOf(num), 1)\r\n            selectBtn[num - 1] = false\r\n            setSelectBtn([...selectBtn])\r\n            setNumList([...numList])\r\n        }\r\n        else if (numList.length === 6) return\r\n        else {\r\n            selectBtn[num - 1] = true\r\n            setSelectBtn([...selectBtn])\r\n            numList.push(num)\r\n            setNumList([...numList])\r\n        }\r\n    }\r\n\r\n    let map = allNum.map((x, idx) => <NumSpan selected={selectBtn[idx]} id={`btn${x}`} onClick={() => select(x)}>{x}</NumSpan>)\r\n\r\n    const reset = () => {\r\n        setSelectBtn([])\r\n        setNumList([])\r\n    }\r\n    const submit = () => {\r\n        if(numList.length<6){\r\n            alert(\"총 6개의 번호를 선택해주세요\")\r\n            return\r\n        }\r\n        if(window.confirm(`로또번호 ${numList} 를 제출하시겠습니까?`)){\r\n            addList(numList)\r\n            history.push('/result')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NumDiv>\r\n                {map}\r\n            </NumDiv>\r\n            <Button color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"초기화\" click={reset}></Button>\r\n            <Button color=\"rgb(86, 115, 235)\" bg=\"rgb(224, 230, 251)\" content=\"번호제출\" click={submit}></Button>\r\n            <LineDiv content=\"내가 뽑은 로또 번호\"></LineDiv>\r\n            <p>{numList.map(x => <ResultNum num={x}></ResultNum>)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectNum\r\n","// types\r\n//interface를 통해 타입을 정해준다.\r\nexport interface State {\r\n  list: number[];\r\n  list2: number[]\r\n}\r\n\r\n//액션 타입\r\nexport const LIST = \"LIST\";\r\nexport const LIST2 = \"LIST2\";\r\n\r\n\r\n//액션 인터페이스 , 함수의 인자를 여기서 설정한다.\r\ninterface ListAction {\r\n  newList: number[];\r\n  type: typeof LIST;\r\n}\r\n\r\ninterface List2Action {\r\n  newList: number[];\r\n  type: typeof LIST2;\r\n}\r\n\r\n\r\n\r\nexport type ActionTypes =\r\n  | ListAction\r\n  | List2Action\r\n// | ChangeInputAction;\r\n\r\n// actions\r\n\r\n\r\n//액션 인터페이스 설정한 내용을 토대로 함수 작성.\r\nfunction list(newList: number[]) {\r\n  return {\r\n    type: LIST,\r\n    newList: newList\r\n  };\r\n}\r\nfunction list2(newList: number[]) {\r\n  return {\r\n    type: LIST2,\r\n    newList: newList\r\n  };\r\n}\r\n\r\n//액션 함수 export\r\nexport const actionCreators = {\r\n  list, list2\r\n};\r\n\r\n//초기값 선언 타입은 가장 위에서 선언한 인터페이스\r\nconst initialState: State = {\r\n  list: [],\r\n  list2: [1,2,3,4,5]\r\n};\r\n\r\n// reducers\r\nexport function Reducer(\r\n  state = initialState,\r\n  action: ActionTypes\r\n): State {\r\n  switch (action.type) {\r\n    case LIST:\r\n      return {\r\n        ...state,\r\n        list: action.newList\r\n      };\r\n    case LIST2:\r\n      return {\r\n        ...state,\r\n        list2: action.newList\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import TsTest from './pages/Draw';\nimport SelectNum from './pages/SelectNum';\nimport { useDispatch } from 'react-redux';\nimport { actionCreators } from './store/store';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useState } from 'react'\nimport styled from 'styled-components'\n\nconst RootDiv = styled.div`\n  animation: ${props=> props.theme.fadeUp} .5s linear alternate;\n`\nconst HeadLine = styled.h2`\nposition: relative;\nbottom: 10vh;\n`\n\nlet pcCheck:string = window.navigator.userAgent.indexOf(\"Mobile\") > -1 ? \"true\" : \"false\"\nsessionStorage.setItem(\"mobile\",pcCheck)\n\nfunction App() {\n  const dispatch = useDispatch(); // 디스패치 함수를 가져옵니다\n  const addList = (newList: number[]) => {\n    dispatch(actionCreators.list(newList))\n  }\n  const [a, setA] = useState<number>(123)\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <RootDiv className=\"App\">\n          <HeadLine>로또 추첨기 with TypeScript</HeadLine>\n          <Route exact path='/' render={()=> <SelectNum addList={addList}></SelectNum>}></Route>\n          <Route path='/result' component={TsTest}></Route>\n        </RootDiv>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { State, Reducer} from './store';\r\n\r\nexport interface StoreState {\r\n    Reducer: State;\r\n}\r\n\r\nexport default combineReducers<StoreState>({\r\n    Reducer\r\n});","import { css, keyframes } from 'styled-components'\r\n// 재사용성 높은 css들 모아놓고 테마로 씀\r\n  const theme = {\r\n     fadeUp : keyframes`\r\n    0% {\r\n      opacity: 0;\r\n      transform : translateY(10px);\r\n    }\r\n    \r\n    100% {\r\n      opacity: 1;\r\n      transform : translateY(0px);\r\n    }\r\n  `,\r\n    flexDiv : css`\r\n      display: flex;\r\n      flex-direction: row;\r\n    `\r\n  }\r\n  \r\n  export default theme","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;  \r\n  }\r\n\r\n  body {\r\n    padding: 12px 20px;\r\n    margin: auto;\r\n    width: 400px;\r\n    overflow: hidden;\r\n    min-height: 100vh;\r\n    box-sizing: border-box;\r\n    text-align : center;\r\n    align-items : center;\r\n    display : grid;\r\n    color : rgb(70, 77, 82);\r\n  }\r\n  \r\n  @media(max-width : 400px){\r\n    body{\r\n      width : 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { compose, createStore } from 'redux';\nimport rootReducer from './store/index';\nimport { ThemeProvider } from 'styled-components'\nimport theme from './theme'\n// **** (1) Provider 불러오기\nimport { Provider } from 'react-redux'\nimport Global from './global'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer,composeEnhancers())\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n    <App />\n    <Global></Global>\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}